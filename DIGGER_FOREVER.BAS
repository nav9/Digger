'<Digger. The classic Digger game re-created in Graphics>
'Copyright (C) <2014> <Navin>

'This program is free software: you can redistribute it and/or modify
'it under the terms of the GNU General Public License as published by
'the Free Software Foundation, either version 3 of the License, or
'(at your option) any later version.

'This program is distributed in the hope that it will be useful,
'but WITHOUT ANY WARRANTY; without even the implied warranty of
'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
'GNU General Public License for more details.

'You should have received a copy of the GNU General Public License
'along with this program. If not, see <http://www.gnu.org/licenses/>.

DECLARE SUB monster (ml1(), ml2(), mr1(), mr2(), m1(), m2(), f3(), A(), d(), gameover%, s(), shoot%)
DECLARE SUB facemoveinblok (f1!(), f2!(), f!())
DECLARE SUB sackpushing (sack!(), s(), d(), A())
DECLARE FUNCTION blockahead! (A!(), d!())
DECLARE SUB sackcheck (A!(), s!(), sack(), charge(), facedeath%, sackpush%, gameover%)
DECLARE SUB sackassign (i%, j%, s!(), count%)
DECLARE SUB bestdirection (f(), B())
DECLARE SUB face (fm1(), fm2(), f(), A(), B(), gameover%)
DECLARE SUB backblock (d())
DECLARE SUB nextblock (d())
DECLARE SUB facearrayassign (face(), count%, i%, j%)
DECLARE SUB movinginblock (d1(), d2(), d3(), d())
DECLARE SUB font (fonts$(), n$, pc, pr, fg, bg)

'freely useable variables- i%,j%,nobody%
'variables that are not freely useable - points,count%

ON ERROR GOTO errorhandling
SCREEN 12: OPTION BASE 0: RANDOMIZE TIMER

DIM A(15, 20), B(15, 20)
DIM d(8), f1(12), f2(12), f3(12), f4(12), f5(12), f6(12)

DIM m1(2, 2), m2(2, 2)

DIM s1(11), s2(11), s3(11)

DIM drt(120), drt2(120), drt3(120), dlt(120), dlt2(120), dlt3(120), dup(120), dup2(120), dup3(120), ddn(120), ddn2(120), ddn3(120)
DIM fm1(120), fm2(120), ml1(120), ml2(120), mr1(120), mr2(120)

DIM diam(120), eme(120), barricade(120), mud(120), mud2(120), mud3(120), mud4(120), mud5(120), bullet1(120), bullet2(120), bullet3(120)
DIM sack(120), charge(120)
DIM fonts$(7, 1)

GOSUB ileft
GET (0, 0)-(29, 29), dlt
GOSUB ileft
GET (0, 0)-(29, 29), dlt2
GOSUB ileft
GET (0, 0)-(29, 29), dlt3
RESTORE: GOSUB iright
GET (0, 0)-(29, 29), drt
GOSUB iright
GET (0, 0)-(29, 29), drt2
GOSUB iright
GET (0, 0)-(29, 29), drt3
RESTORE: GOSUB iup
GET (0, 0)-(29, 29), dup
GOSUB iup
GET (0, 0)-(29, 29), dup2
GOSUB iup
GET (0, 0)-(29, 29), dup3
CLS : RESTORE: GOSUB idown
GET (0, 0)-(29, 29), ddn
GOSUB idown
GET (0, 0)-(29, 29), ddn2
GOSUB idown
GET (0, 0)-(29, 29), ddn3
GOSUB ileft
GET (0, 0)-(29, 29), fm1
GOSUB ileft
GET (0, 0)-(29, 29), fm2
GOSUB ileft
GET (0, 0)-(29, 29), ml1
GOSUB ileft
GET (0, 0)-(29, 29), ml2
GOSUB iright
GET (0, 0)-(29, 29), mr1
GOSUB iright
GET (0, 0)-(29, 29), mr2
GOSUB ileft
GET (0, 0)-(29, 29), diam
GOSUB ileft
GET (0, 0)-(29, 29), eme
GOSUB ileft
GET (0, 0)-(29, 29), mud
GOSUB ileft
GET (0, 0)-(29, 29), mud2
GOSUB ileft
GET (0, 0)-(29, 29), mud3
GOSUB ileft
GET (0, 0)-(29, 29), mud4
GOSUB ileft
GET (0, 0)-(29, 29), mud5
GOSUB ileft
GET (0, 0)-(29, 29), sack
GOSUB ileft
GET (0, 0)-(29, 29), charge
GOSUB ileft
GET (0, 0)-(29, 29), barricade

FOR i% = 1 TO 7: READ fonts$(i%, 1): NEXT


LINE (0, 0)-(29, 29), 0, BF
CIRCLE (15, 15), 2, 14: PAINT (15, 15), 14
GET (0, 0)-(29, 29), bullet1
CIRCLE (15, 15), 5, 14: PAINT (15, 15), 14
GET (0, 0)-(29, 29), bullet2
CIRCLE (15, 15), 10, 14: PAINT (15, 15), 14
GET (0, 0)-(29, 29), bullet3
GOSUB introscreen
bleat = .004
life% = 5
level% = 1
FOR i% = 0 TO 2: FOR j% = 0 TO 2: m1(i%, j%) = 1: NEXT: NEXT: m1(2, 1) = 0
gamestarts:
GOSUB gamestart
game:
PUT (d(3), d(2)), drt
SLEEP

keyin:
DO WHILE x$ <> CHR$(27)
K$ = INKEY$
IF K$ = CHR$(0) + CHR$(72) THEN d(8) = 2
IF K$ = CHR$(0) + CHR$(80) THEN d(8) = -2
IF K$ = CHR$(0) + CHR$(77) THEN d(8) = 1
IF K$ = CHR$(0) + CHR$(75) THEN d(8) = -1
IF K$ = CHR$(32) THEN shoot% = 1
IF K$ = CHR$(27) THEN gameover% = 3 'for exiting
IF K$ = "n" OR K$ = "N" THEN gameover% = 1: points = points - 5000
IF K$ = "l" OR K$ = "L" THEN life% = 10: points = points - 8000
IF K$ = "D" OR K$ = "d" THEN bleat = .004
IF K$ = "b" OR K$ = "B" THEN bullets% = 10: points = points - 1000
IF K$ = "+" THEN bleat = bleat - .05
IF K$ = "-" THEN bleat = bleat + .05
'    PRINT "String Space", FRE("")
'    PRINT "Unused Stack Space", FRE(-2)
'    PRINT "Array Space", FRE(-1)

'---------------------------------------------------------------------------
'------------------------------!!<<digger>>!!-------------------------------
'---------------------------------------------------------------------------
DO WHILE x$ <> CHR$(27)
IF d(4) = 0 THEN EXIT DO
IF d(5) = 0 THEN
 
   sackid% = 0: sackpush% = 0
   IF (d(3) = 605 AND d(8) = 1) OR (d(2) = 425 AND d(8) = -2) THEN d(2) = d(0): d(3) = d(1): EXIT DO
   CALL nextblock(d())
   '-----------------------finding the array element
   d(6) = ((d(2) - 5) / 30)
   d(7) = ((d(3) - 5) / 30)
   IF d(6) = -1 OR d(7) = -1 THEN d(2) = d(0): d(3) = d(1): EXIT DO
   '-----------------------
   CALL backblock(d())
  
   SELECT CASE A(d(6), d(7))
         
          CASE 4:
               PLAY "mbT255L16AE"
               diamond% = diamond% - 1
               points = points + 40
               IF diamond% = 0 THEN gameover% = 1
               CALL nextblock(d())
               LINE (d(3), d(2))-(d(3) + 29, d(2) + 29), 0, BF
               A(d(6), d(7)) = 0
               CALL backblock(d())
               EXIT DO
          CASE 5:
               PLAY "mbT255L16AE"
               diamond% = diamond% - 1
               points = points + 50
               IF diamond% = 0 THEN gameover% = 1
               CALL nextblock(d())
               LINE (d(3), d(2))-(d(3) + 29, d(2) + 29), 0, BF
               A(d(6), d(7)) = 0
               CALL backblock(d())
               EXIT DO
          CASE 2:
               d(2) = d(0): d(3) = d(1): EXIT DO
          CASE 7:
               FOR i = 1000 TO 2000 STEP 100: SOUND i, .1: NEXT
               bullets% = bullets% + 1: points = points + 30
               CALL nextblock(d())
               LINE (d(3), d(2))-(d(3) + 29, d(2) + 29), 0, BF
               A(d(6), d(7)) = 0
               CALL backblock(d())
               EXIT DO
          CASE 6: 
          IF blockahead(A(), d()) = 0 THEN
                                       sackpush% = 1: SOUND 1000, .5
                                       IF s1(6) = d(6) AND s1(7) = d(7) THEN sackid% = s1(9)
                                       IF s2(6) = d(6) AND s2(7) = d(7) THEN sackid% = s2(9)
                                       IF s3(6) = d(6) AND s3(7) = d(7) THEN sackid% = s3(9)
                                      ELSE
                                       d(2) = d(0): d(3) = d(1): sackpush% = 0: SOUND 5000, .5: EXIT DO
          END IF
              
   END SELECT
 
  
   d(5) = 1: A(d(6), d(7)) = 9
   d(4) = d(8)
 
   SELECT CASE d(4)
          CASE 1:
               A(d(6), d(7) - 1) = 0
          CASE 2:
               A(d(6) + 1, d(7)) = 0
          CASE -1:
               A(d(6), d(7) + 1) = 0
          CASE -2:
               A(d(6) - 1, d(7)) = 0
   END SELECT
 
  
   IF count% = 30000 THEN count% = 1
   B(d(6), d(7)) = count%: count% = count% + 1
  
END IF    '--------------------------------------------


   SELECT CASE d(4)
          CASE 1:
               LINE (d(3), d(2))-(d(3) + 34, d(2) + 29), 0, BF
               d(3) = d(3) + 5
               CALL movinginblock(drt(), drt2(), drt3(), d())
          CASE -1:
               LINE (d(3) - 5, d(2))-(d(3) + 29, d(2) + 29), 0, BF
               d(3) = d(3) - 5
               CALL movinginblock(dlt(), dlt2(), dlt3(), d())
             
          CASE 2:
               LINE (d(3), d(2) - 5)-(d(3) + 29, d(2) + 29), 0, BF
               d(2) = d(2) - 5
               CALL movinginblock(dup(), dup2(), dup3(), d())
              
          CASE -2:
               LINE (d(3), d(2))-(d(3) + 29, d(2) + 34), 0, BF
               d(2) = d(2) + 5
               CALL movinginblock(ddn(), ddn2(), ddn3(), d())
             
   END SELECT
               IF sackpush% = 1 THEN
               SELECT CASE sackid%
                      CASE 1:
                           CALL sackpushing(sack(), s1(), d(), A())
                      CASE 2:
                           CALL sackpushing(sack(), s2(), d(), A())
                      CASE 3:
                           CALL sackpushing(sack(), s3(), d(), A())
               END SELECT
            
               END IF

EXIT DO
LOOP
'-------------------------------------------------------------------------
'---------------------!!<<end of digger module>>!!------------------------
'-------------------------------------------------------------------------





'-------------------------------------------------------------------------
'-----------------------@@shooting module@@-------------------------------
'-------------------------------------------------------------------------
DO WHILE x$ <> CHR$(27)
IF bullets% < 1 THEN shoot% = 0: shooting% = 0: EXIT DO
IF shoot% <> 1 THEN EXIT DO
IF shooting% <> 1 THEN
   shooting% = 1
   s(4) = d(4)
   s(0) = 30 * d(6) + 5
   s(1) = 30 * d(7) + 5
   s(2) = s(0)
   s(3) = s(1)
   SELECT CASE s(4)
          CASE 1:
               s(5) = 0: s(6) = d(6): s(7) = d(7) + 1
          CASE -1:
               s(5) = steplimit%: s(6) = d(6): s(7) = d(7)
          CASE 2:
               s(5) = steplimit%: s(6) = d(6) - 1: s(7) = d(7)
          CASE -2:
               s(5) = 0: s(6) = d(6) + 1: s(7) = d(7)
   END SELECT
   EXIT DO
ELSE
IF s(6) <= -1 OR s(6) >= 15 OR s(7) <= -1 OR s(7) >= 21 THEN shooting% = 0: shoot% = 0: bullets% = bullets% - 1: LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF: EXIT DO
SELECT CASE A(s(6), s(7))
       CASE 1 TO 8:
            shooting% = 0
            shoot% = 0: bullets% = bullets% - 1
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            EXIT DO
       CASE 10:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f1(9) = 99: EXIT DO
       CASE 11:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f2(9) = 99: EXIT DO
       CASE 12:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f3(9) = 99: EXIT DO
       CASE 13:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f4(9) = 99: EXIT DO
       CASE 14:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f5(9) = 99: EXIT DO
       CASE 15:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f6(9) = 99: EXIT DO
END SELECT


   IF s(5) = steplimit% THEN
      s(5) = 1
      SELECT CASE s(4)
             CASE 1:
                  s(7) = s(7) + 1
                  IF s(7) = 21 THEN shoot% = 0: bullets% = bullets% - 1: shooting% = 0: LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF: EXIT DO
             CASE -1:
                  s(7) = s(7) - 1
                  IF s(7) = -1 THEN shoot% = 0: bullets% = bullets% - 1: shooting% = 0: LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF: EXIT DO
             CASE 2:
                  s(6) = s(6) - 1
                  IF s(6) = -1 THEN shoot% = 0: bullets% = bullets% - 1: shooting% = 0: LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF: EXIT DO
             CASE -2:
                  s(6) = s(6) + 1
                  IF s(6) = 15 THEN shoot% = 0: bullets% = bullets% - 1: shooting% = 0: LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF: EXIT DO
      END SELECT
   
  
   ELSE s(5) = s(5) + 1
   END IF

   SELECT CASE s(4)
          CASE 1:
               s(3) = s(3) + stepjump%
          CASE -1:
               s(3) = s(3) - stepjump%
          CASE 2:
               s(2) = s(2) - stepjump%
          CASE -2:
               s(2) = s(2) + stepjump%
   END SELECT


IF (s(3) = 605 AND s(4) = 1) OR (s(2) = 425 AND s(4) = -2) THEN
 shooting% = 0: shoot% = 0: bullets% = bullets% - 1
 LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
 EXIT DO
END IF
IF s(6) <= -1 OR s(6) >= 15 OR s(7) <= -1 OR s(7) >= 21 THEN shooting% = 0: shoot% = 0: bullets% = bullets% - 1: LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF: EXIT DO
SELECT CASE A(s(6), s(7))
       CASE 1 TO 8:
            shooting% = 0
            shoot% = 0: bullets% = bullets% - 1
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            EXIT DO
       CASE 10:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f1(9) = 99: EXIT DO
       CASE 11:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f2(9) = 99: EXIT DO
       CASE 12:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f3(9) = 99: EXIT DO
       CASE 13:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f4(9) = 99: EXIT DO
       CASE 14:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f5(9) = 99: EXIT DO
       CASE 15:
            shooting% = 0: shoot% = 0: bullets% = bullets% - 1: points = points + 60
            LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
            f6(9) = 99: EXIT DO
END SELECT


LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
IF nobody% = 3 THEN nobody% = 1 ELSE nobody% = nobody% + 1
SELECT CASE nobody%
       CASE 1:
            PUT (s(3), s(2)), bullet1
       CASE 2:
            PUT (s(3), s(2)), bullet2
       CASE 3:
            PUT (s(3), s(2)), bullet3
END SELECT

s(0) = s(2): s(1) = s(3)
END IF

EXIT DO
LOOP
'-------------------------------------------------------------------------
'------------------@@end of shooting module@@-----------------------------
'-------------------------------------------------------------------------









'-------------------------------------------------------------------------
'----------------------**<<face monster module>>**------------------------
'-------------------------------------------------------------------------
IF f1(9) > 0 AND count% > 24 THEN
SELECT CASE f1(4)
       
          CASE 1:
               CALL face(fm1(), fm2(), f1(), A(), B(), gameover%)
          CASE -1:
               CALL face(fm1(), fm2(), f1(), A(), B(), gameover%)
          CASE 2:
               CALL face(fm1(), fm2(), f1(), A(), B(), gameover%)
          CASE -2:
               CALL face(fm1(), fm2(), f1(), A(), B(), gameover%)
   END SELECT
ELSE
IF f1(9) <> 10 AND noofface% > 0 THEN i% = 10: CALL facearrayassign(f1(), i%, fsr%, fsc%)
END IF

IF f2(9) > 0 AND count% > 42 THEN
SELECT CASE f2(4)
      
          CASE 1:
               CALL face(fm1(), fm2(), f2(), A(), B(), gameover%)
          CASE -1:
               CALL face(fm1(), fm2(), f2(), A(), B(), gameover%)
          CASE 2:
               CALL face(fm1(), fm2(), f2(), A(), B(), gameover%)
          CASE -2:
               CALL face(fm1(), fm2(), f2(), A(), B(), gameover%)
   END SELECT
ELSE
IF f2(9) <> 11 AND noofface% > 1 THEN i% = 11: CALL facearrayassign(f2(), i%, fsr%, fsc%)
END IF

IF f3(9) > 0 AND count% > 60 THEN
               CALL monster(ml1(), ml2(), mr1(), mr2(), m1(), m2(), f3(), A(), d(), gameover%, s(), shoot%)
ELSE
IF f3(9) <> 12 AND noofface% > 2 THEN i% = 12: CALL facearrayassign(f3(), i%, fsr%, fsc%)
END IF

IF f4(9) > 0 AND count% > 72 THEN
               CALL monster(ml1(), ml2(), mr1(), mr2(), m1(), m2(), f3(), A(), d(), gameover%, s(), shoot%)
ELSE
IF f4(9) <> 13 AND noofface% > 3 THEN i% = 13: CALL facearrayassign(f4(), i%, fsr%, fsc%)
END IF


IF f5(9) > 0 AND count% > 78 THEN
SELECT CASE f5(4)
   
          CASE 1:
               CALL face(fm1(), fm2(), f5(), A(), B(), gameover%)
          CASE -1:
               CALL face(fm1(), fm2(), f5(), A(), B(), gameover%)
          CASE 2:
               CALL face(fm1(), fm2(), f5(), A(), B(), gameover%)
          CASE -2:
               CALL face(fm1(), fm2(), f5(), A(), B(), gameover%)
   END SELECT
ELSE
IF f5(9) <> 14 AND noofface% > 4 THEN i% = 14: CALL facearrayassign(f5(), i%, fsr%, fsc%)
END IF

IF f6(9) > 0 AND count% > 90 THEN
               CALL monster(ml1(), ml2(), mr1(), mr2(), m1(), m2(), f3(), A(), d(), gameover%, s(), shoot%)
ELSE
IF f6(9) <> 15 AND noofface% > 5 THEN i% = 15: CALL facearrayassign(f6(), i%, fsr%, fsc%)
END IF

'-------------------------------------------------------------------------
'-------------------**<<end of face monster module>>**--------------------
'-------------------------------------------------------------------------

IF f1(9) = -1 THEN f1(12) = count%
IF f2(9) = -1 THEN f2(12) = count%
IF f3(9) = -1 THEN f3(12) = count%
IF f4(9) = -1 THEN f4(12) = count%
IF f5(9) = -1 THEN f5(12) = count%
IF f6(9) = -1 THEN f6(12) = count%








'-------------------------------------------------------------------------
'-------------------##<<start of sack module>>##--------------------------
'-------------------------------------------------------------------------
IF s1(9) = 1 THEN CALL sackcheck(A(), s1(), sack(), charge(), facedeath%, sackpush%, gameover%)
IF s2(9) = 2 THEN CALL sackcheck(A(), s2(), sack(), charge(), facedeath%, sackpush%, gameover%)
IF s3(9) = 3 THEN CALL sackcheck(A(), s3(), sack(), charge(), facedeath%, sackpush%, gameover%)
SELECT CASE facedeath%
       CASE 10:
            f1(9) = -1: f1(12) = count%: points = points + 100: facedeath% = 0: LINE (f1(1), f1(0))-(f1(1) + 29, f1(0) + 29), 0, BF
       CASE 11:
            f2(9) = -1: f2(12) = count%: points = points + 100: facedeath% = 0: LINE (f2(1), f2(0))-(f2(1) + 29, f2(0) + 29), 0, BF
       CASE 12:
            f3(9) = -1: f3(12) = count%: points = points + 100: facedeath% = 0: LINE (f3(1), f3(0))-(f3(1) + 29, f3(0) + 29), 0, BF
       CASE 13:
            f4(9) = -1: f4(12) = count%: points = points + 100: facedeath% = 0: LINE (f4(1), f4(0))-(f4(1) + 29, f4(0) + 29), 0, BF
       CASE 14:
            f5(9) = -1: f5(12) = count%: points = points + 100: facedeath% = 0: LINE (f5(1), f5(0))-(f5(1) + 29, f5(0) + 29), 0, BF
       CASE 15:                                                           
            f6(9) = -1: f6(12) = count%: points = points + 100: facedeath% = 0: LINE (f6(1), f6(0))-(f6(1) + 29, f6(0) + 29), 0, BF
END SELECT
'-------------------------------------------------------------------------
'--------------------##<<end of sack module>>##---------------------------
'-------------------------------------------------------------------------

'----gameover or level cross check
n$ = "SCORE : " + STR$(points): pc = 260: pr = 437: fg = 14: bg = 9
CALL font(fonts$(), n$, pc, pr, fg, bg)
n$ = "LIVES : " + STR$(life%): pc = 390: fg = 12: bg = 9
CALL font(fonts$(), n$, pc, pr, fg, bg)
n$ = "BULLETS : " + STR$(bullets%): pc = 490: fg = 10: bg = 9
CALL font(fonts$(), n$, pc, pr, fg, bg)

IF gameover% > 0 THEN GOSUB gameover
i = TIMER + bleat: WHILE i > TIMER: WEND
LOOP                                           'looping of the main module
'-------------------------------------------------------------------------
'-------------------------------------------------------------------------
'-------------------------<<<end of main module>>>------------------------
'-------------------------------------------------------------------------
'-------------------------------------------------------------------------




















'-------------------------------------------------------------------------
'-----------------------^^error handling^^--------------------------------
errorhandling:
IF ERL = 300 THEN CLOSE #1: OPEN "o", #1, "digscore.dig": K$ = "nobody": t = 0: RESUME 400
IF ERL = 100 THEN CLOSE #1: OPEN "O", #1, "digscore.dig": RESUME 200
IF ERR = 9 THEN RESUME NEXT ELSE BEEP: LOCATE 12, 15: PRINT "An unexpected error occured.The game will terminate now.": SLEEP: SYSTEM
SLEEP
RESUME NEXT
'-------------------^^end of error handling^^-----------------------------
'-------------------------------------------------------------------------


'---data for digger facing left
DATA PPOOOOOOOOOOOOBBBBBBOOOOOOOOOO
DATA OPPOOOOOOOOOOBBBBBBBBOOOOOOOOO
DATA OOPOOOOOOOOOBBBBBBBBBBOOOOOOOO
DATA OOPPOOOOOOOBBBBBBBBBBBOOOOOOOO
DATA OOOPPOOORRBBBBBBBBBBBBRRRROOOO
DATA OOOOPPORRRBBBBBBBBBBBBRRRRROOO
DATA OOOOPPPOOOOOOBBBBBBBBRRRRRRROO
DATA OOOOOPPPRRRRRRRRRRRRRRRRRRRROO
DATA OOOOOPPPRRRRRRRRRRRRRRRRRRRRRO
DATA OOOOOPPPDDRRRRRRRRRRRRRRRRRRRO
DATA OOOOOOPPRRDDRRRRRRRRRRRRRRRRRO
DATA OOOOOOPPRRRDDDDDDRRRRRRRRRRRRO
DATA OOOOOOPPRRRRDYYYYDDRRRRRRRRRRR
DATA OOOOOPPPRRRRDYYYYYYDRRRRRRRRRR
DATA OOOOOPPPRRRRRDYYYYYYDRRRRRRRRR
DATA OOOOPPPRRRRRRDYYYYYYYDRRRRRRRR
DATA OOOOPPORRRRRRRDYYYYYYDRRRRRDRR
DATA OOOPPOOORRRRRRRDDYYYYYDRRRDRRR
DATA OOOPOORRRRRRRRRRRDDDDDDDDDRRRR
DATA OOPPORRRREEEEEERRRRRRRRRRRRRRO
DATA OOPORRRREEEERRREEEERRRRRRRRROO
DATA OPPORRREEEERRRRRRRREEEERRRRROO
DATA PPOOORRRRRRRRRRRRRRRRRRRRROOOO
DATA OOOOGGGGGGGGGGGGGGGGGGGGGGGOOO
DATA OOOGOLLOOOOLLOOOOOLLOOOOLLOGOO
DATA OOGGLLLLOOLLLLOOOLLLLOOLLLLGGO
DATA OGGBBBBBBBBBBBBOBBBBBBBBBBBBGG
DATA OOGGLLLLOOLLLLOOOLLLLOOLLLLGGO
DATA OOOGOLLOOOOLLOOOOOLLOOOOLLOGOO
DATA OOOOGGGGGGGGGGGGGGGGGGGGGGGOOO
'---digger step 2
DATA OOOOOOOOOOOOOOOOBBBBBBOOOOOOOO
DATA OOOOOOOOOOOOOOOBBBBBBBBOOOOOOO
DATA OOOOOOOOOOOOOOBBBBBBBBBBOOOOOO
DATA PPPPOOOOOOOOOBBBBBBBBBBBOOOOOO
DATA PPPPPOOOOOOOBBBBBBBBBBBBRRRROO
DATA OOOPPPORRRRRBBBBBBBBBBBBRRRROO
DATA OOOOPPPOOOOOOBBBBBBBBRRRRRRROO
DATA OOOOOPPPRRRRRRRRRRRRRRRRRRRROO
DATA OOOOOPPPRRRRRRRRRRRRRRRRRRRRRO
DATA OOOOOPPPDDRRRRRRRRRRRRRRRRRRRO
DATA OOOOOOPPRRDDRRRRRRRRRRRRRRRRRO
DATA OOOOOOPPRRRDDDDDDRRRRRRRRRRRRO
DATA OOOOOOPPRRRRDYYYYDDRRRRRRRRRRR
DATA OOOOOPPPRRRRDYYYYYYDRRRRRRRRRR
DATA OOOOOPPPRRRRRDYYYYYYDRRRRRRRRR
DATA OOOOPPPRRRRRRDYYYYYYYDRRRRRRRR
DATA OOOPPPORRRRRRRDYYYYYYDRRRRRDRR
DATA OOPPPOOORRRRRRRDDYYYYYDRRRDRRR
DATA PPPPOORRRRRRRRRRRDDDDDDDDDRRRR
DATA PPPPORRRREEEEEERRRRRRRRRRRRRRO
DATA OOOORRRREEEERRREEEERRRRRRRRROO
DATA OOOORRREEEERRRRRRRREEEERRRRROO
DATA OOOOORRRRRRRRRRRRRRRRRRRRROOOO
DATA OOOOGGGGGGGGGGGGGGGGGGGGGGGOOO
DATA OOOGOLLOOOOLLOOOOOLLOOOOLLOGOO
DATA OOGGLLLLOOLLLLOOOLLLLOOLLLLGGO
DATA OGGBBBBBBBBBBBBOBBBBBBBBBBBBGG
DATA OOGGLLLLOOLLLLOOOLLLLOOLLLLGGO
DATA OOOGOLLOOOOLLOOOOOLLOOOOLLOGOO
DATA OOOOGGGGGGGGGGGGGGGGGGGGGGGOOO
'---digger step 3
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOBBBBBBBBOOOOOOOOO
DATA OOOOOOOOOOOOBBBBBBBBBBOOOOOOOO
DATA OOOOOOOOOOOBBBBBBBBBBBOOOOOOOO
DATA OOOOOOOOOOBBBBBBBBBBBBRRRRRROO
DATA OOOPPPORRRBBBBBBBBBBBBRRRRRRRO
DATA PPPPPPPOOOBBBBBBBBBBBRRRRRRRRO
DATA PPOOOPPPRRRBBBBBBBBRRRRRRRRROO
DATA POOOOPPPRRRRRRRRRRRRRRRRRRRRRO
DATA OOOOOPPPDDRRRRRRRRRRRRRRRRRRRO
DATA OOOOOOPPRRDDRRRRRRRRRRRRRRRRRO
DATA OOOOOOPPRRRDDDDDDRRRRRRRRRRRRO
DATA OOOOOOPPRRRRDYYYYAARRRRRRRRRRR
DATA OOOOOPPPRRRRDYYYYYYARRRRRRRRRR
DATA POOOOPPPRRRRRDYYYYYYARRRRRRRRR
DATA PPOOOPPRRRRRRDYYYYYYYARRRRRRRR
DATA PPPPPPORRRRRRRDYYYYYYARRRRRDRR
DATA OOPPPOOORRRRRRRDDYYYYYARRRDRRR
DATA OOOOOORRRRRRRRRRRDDDDDDDDDRRRR
DATA OOOOORRRREEEEEERRRRRRRRRRRRRRO
DATA OOOORRRREEEERRREEEERRRRRRRRROO
DATA OOOORRREEEERRRRRRRREEEERRRRROO
DATA OOOOORRRRRRRRRRRRRRRRRRRRROOOO
DATA OOOOGGGGGGGGGGGGGGGGGGGGGGGOOO
DATA OOOGOLLOOOOLLOOOOOLLOOOOLLOGOO
DATA OOGGLLLLOOLLLLOOOLLLLOOLLLLGGO
DATA OGGBBBBBBBBBBBBOBBBBBBBBBBBBGG
DATA OOGGLLLLOOLLLLOOOLLLLOOLLLLGGO
DATA OOOGOLLOOOOLLOOOOOLLOOOOLLOGOO
DATA OOOOGGGGGGGGGGGGGGGGGGGGGGGOOO
'----face 1
DATA OOOOOOOOOPPPPPPPPPPPPOOOOOOOOO
DATA OOOOOOPPPIIIIIIIIIIIIPPPOOOOOO
DATA OOOOPPIIIIIBIIIIIIBIIIIIPPOOOO
DATA OOOPIIIIIIIIBIIIIBIIIIIIIIPOOO
DATA OOOPIIIIIIIIBIIIIBIIIIIIIIPOOO
DATA OOPIIIIPPPPIIBIIBIIPPPPIIIIPOO
DATA OPPIIIPBEEEPIIIIIIPBEEEPIIIPPO
DATA OPIIIPBBBEEEPIIIIPBBBEEEPIIIPO
DATA PIIIIPBBBBEEPIIIIPBBBBEEPIIIIP
DATA PIIIIPBBBBEEPIIIIPBBBBEEPIIIIP
DATA PIIIPBBBBBEEEPIIPBBBBBEEEPIIIP
DATA PIIIPBBBBBEEEPIIPBBBBBEEEPIIIP
DATA PIIIPBBBBEEEEPIIPBBBBEEEEPIIIP
DATA OPIIIPBBEEEEPIIIIPBBEEEEPIIIPO
DATA OPIIIPEEEEEEPIIIIPEEEEEEPIIIPO
DATA OOPPIIPEEEEPIIIIIIPEEEEPIIPPOO
DATA OOOOPIIPPPPIIIIIIIIPPPPIIPOOOO
DATA OOOOOPIIIIIIIIIIIIIIIIIIPOOOOO
DATA OOOOOOPIIIIIIIIIIIIIIIIPOOOOOO
DATA OOOOOOOPIIIIIIIIIIIIIIPOOOOOOO
DATA OOOOOOOPIIIIIIIIIIIIIIPOOOOOOO
DATA OOOOOOOPPIIIIIIIIIIIIPPOOOOOOO
DATA OOOOOOOOPPPPPPPPPPPPPPOOOOOOOO
DATA OOOOOOOOPPPPOOOOOOPPPPOOOPPPPO
DATA OOOOOOOOPPPPOOOOOPPPPPOOPPPPPP
DATA OPPPPOOOPPPPOOOOPPPPPPPPPPPPPP
DATA PPPPPPOOPPPPPOOOPPPPPPPPPPPPPP
DATA PPPPPPPPPPPPPPOOPPOOPPPPPPPPPO
DATA PPPPPPPPPPPPPPOOOOOOOOOOOOOOOO
DATA OPPPPPPPPOOPPOOOOOOOOOOOOOOOOO
'---face pos 2
DATA OOOOOOOOOPPPPPPPPPPPPOOOOOOOOO
DATA OOOOOOPPPIIIIIIIIIIIIPPPOOOOOO
DATA OOOOPPIIIIIBIIIIIIBIIIIIPPOOOO
DATA OOOPIIIIIIIIBIIIIBIIIIIIIIPOOO
DATA OOOPIIIIIIIIBIIIIBIIIIIIIIPOOO
DATA OOPIIIIPPPPIIBIIBIIPPPPIIIIPOO
DATA OPPIIIPEEEBPIIIIIIPEEEBPIIIPPO
DATA OPIIIPEEEBBBPIIIIPEEEBBBPIIIPO
DATA PIIIIPEEBBBBPIIIIPEEBBBBPIIIIP
DATA PIIIIPEEBBBBPIIIIPEEBBBBPIIIIP
DATA PIIIPEEEBBBBBPIIPEEEBBBBBPIIIP
DATA PIIIPEEEBBBBBPIIPEEEBBBBBPIIIP
DATA PIIIPEEEEBBBBPIIPEEEEBBBBPIIIP
DATA OPIIIPEEEEBBPIIIIPEEEEBBPIIIPO
DATA OPIIIPEEEEEEPIIIIPEEEEEEPIIIPO
DATA OOPPIIPEEEEPIIIIIIPEEEEPIIPPOO
DATA OOOOPIIPPPPIIIIIIIIPPPPIIPOOOO
DATA OOOOOPIIIIIIIIIIIIIIIIIIPOOOOO
DATA OOOOOOPIIIIIIIIIIIIIIIIPOOOOOO
DATA OOOOOOOPIIIIIIIIIIIIIIPOOOOOOO
DATA OOOOOOOPIIIIIIIIIIIIIIPOOOOOOO
DATA OOOOOOOPPIIIIIIIIIIIIPPOOOOOOO
DATA OOOOOOOOPPPPPPPPPPPPPPOOOOOOOO
DATA OPPPPOOOPPPPOOOOOOPPPPOOOOOOOO
DATA PPPPPPOOPPPPPOOOOOPPPPOOOOOOOO
DATA PPPPPPPPPPPPPPOOOOPPPPOOOPPPPO
DATA PPPPPPPPPPPPPPOOOPPPPPOOPPPPPP
DATA OPPPPPPPPOOPPOOOPPPPPPPPPPPPPP
DATA OOOOOOOOOOOOOOOOPPPPPPPPPPPPPP
DATA OOOOOOOOOOOOOOOOPPOOPPPPPPPPPO
'--mon
DATA OOOOOOOOOOOOOOOLLLLLLLOOOOOOOO
DATA OOOOOOOOOOOOOLLBEEEEEBLLLOOOOO
DATA OOOOOOOOOOOLLBBEBBBLBBBBBLOOOO
DATA OOOOOOOOOOLBBBEBBBLTLBBBBBLOOO
DATA OOOOOOOOOLBBBBBBBLRTTLBBBBBLOO
DATA OOOOOOOOLBBBBBBBLRRRTTLBBBBBLO
DATA OOOOOOLLBBBBBBBBLRRRTTLBBBBBLO
DATA OOOOOLLBBBBBBBBBLRRRRTLBBBBBBL
DATA OOOLLBBBBBBBBBBLRRRRRTTLBBBBBL
DATA OLLBBBBBBBBBBBBLRRRRRTTLBBBBBL
DATA LBBBBBBBBBBBBBBLRRRRRTTLBBBBBL
DATA LLLBBBBBBBBBBBBLRRRRRTTLBBBBBL
DATA OOOLLLLLBBBBBBBBLRRRTTLBBBBBBL
DATA OOOOOOOOLLLLBBBBLRRRTTLBBBBBLB
DATA OOOOOOOOOOOOLBBBLRRTTTLBBBBBLO
DATA OOOOOOOOOOLLBBBBBLTTTLBBBBBBLO
DATA OOOOOOLLLLBBBBBBBBLTLBBBBBBLOO
DATA OOLLLLBBBBBBBBBBBBBLBBBBBBBLOO
DATA LLBBBBBBBBBBBBBBBBBBBBBBBBBLOO
DATA OLLLLLBBBBBBBBBBBBBBBBBBBBLOOO
DATA OOOOOOLLLLBBBBBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOLLLBBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOOOOLBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOOOOLBBBBBBBBBBBBBLOO
DATA OOOOOOOOOOOLLBBBBBBBBBBBBBBLOO
DATA OOOOOOOOLLLBBBBBBBBBBBBBBBBBLO
DATA OOOOOOLLBBBBBLBBBBBLLBBBBBBBLO
DATA OOOOOLLBBBBLLOLBBBLOOLBBBBBLOO
DATA OOOOOLBBBLLOOOOLBBLOOOLBBBBLOO
DATA OOOOOOLLLLOOOOOOLLOOOOOLLLLOOO
'--mon2
DATA OOOOOOOOOOOOOOOLLLLLLLOOOOOOOO
DATA OOOOOOOOOOOOOLLBEEEEEBLLLOOOOO
DATA OOOOOOOOOOOLLBBEBBBLBBBBBLOOOO
DATA OOOOOOOOOOLBBBEBBBLTLBBBBBLOOO
DATA OOOOOOOOOLBBBBBBBLRTTLBBBBBLOO
DATA OOOOOOOOLBBBBBBBLRRRTTLBBBBBLO
DATA OOOOOOLLBBBBBBBBLRRRTTLBBBBBLO
DATA OOOOOOLBBBBBBBBBLRRRRTLBBBBBBL
DATA OOOOOLBBBBBBBBBLRRRRRTTLBBBBBL
DATA OOOOLBBBBBBBBBBLRRRRRTTLBBBBBL
DATA OOOLOBBBBBBBBBBLRRRRRTTLBBBBBL
DATA OLLBBBBBBBBBBBBLRRRRRTTLBBBBBL
DATA LLLLLLLLLLLBBBBBLRRRTTLBBBBBBL
DATA LLLLLLLLLLLLOBBBLRRRTTLBBBBBLB
DATA LOOOOOOOOOOOOBBBLRRTTTLBBBBBLO
DATA OLOOOOOOOOOOBBBBBLTTTLBBBBBBLO
DATA OOLOOOOOOOOOBBBBBBLTLBBBBBBLOO
DATA OOOLLLBBBBBBBBBBBBBLBBBBBBBLOO
DATA OOOOOOLBBBBBBBBBBBBBBBBBBBBLOO
DATA OOOOOOOLLOBBBBBBBBBBBBBBBBLOOO
DATA OOOOOOOOOLBBBBBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOLLLBBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOOOOLBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOOOOLBBBBBBBBBBBBBLOO
DATA OOOOOOOOOOLLLBBBBBBBBBBBBBBLOO
DATA OOOOOOLLLLBBBBBBBBBBBBBBBBBBLO
DATA OOOOOLLBBLBBBBBLLLBBBBBBBBLBBL
DATA OOOOLBBLOLBBBBLOOOLBBBBBBLOLLL
DATA OOOOOLLOOLBBBLOOOOOLBBBBLOOOOO
DATA OOOOOOOOOOLLLOOOOOOOLLLLOOOOOO
'--monRT
DATA OOOOOOOOOOOOOOOLLLLLLLOOOOOOOO
DATA OOOOOOOOOOOOOLLBEEEEEBLLLOOOOO
DATA OOOOOOOOOOOLLBBEBBBLBBBBBLOOOO
DATA OOOOOOOOOOLBBBEBBBLTLBBBBBLOOO
DATA OOOOOOOOOLBBBBBBBLRTTLBBBBBLOO
DATA OOOOOOOOLBBBBBBBLRRRTTLBBBBBLO
DATA OOOOOOLLBBBBBBBBLRRRTTLBBBBBLO
DATA OOOOOLLBBBBBBBBBLRRRRTLBBBBBBL
DATA OOOLLBBBBBBBBBBLRRRRRTTLBBBBBL
DATA OLLBBBBBBBBBBBBLRRRRRTTLBBBBBL
DATA LBBBBBBBBBBBBBBLRRRRRTTLBBBBBL
DATA LLLBBBBBBBBBBBBLRRRRRTTLBBBBBL
DATA OOOLLLLLBBBBBBBBLRRRTTLBBBBBBL
DATA OOOOOOOOLLLLBBBBLRRRTTLBBBBBLB
DATA OOOOOOOOOOOOLBBBLRRTTTLBBBBBLO
DATA OOOOOOOOOOLLBBBBBLTTTLBBBBBBLO
DATA OOOOOOLLLLBBBBBBBBLTLBBBBBBLOO
DATA OOLLLLBBBBBBBBBBBBBLBBBBBBBLOO
DATA LLBBBBBBBBBBBBBBBBBBBBBBBBBLOO
DATA OLLLLLBBBBBBBBBBBBBBBBBBBBLOOO
DATA OOOOOOLLLLBBBBBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOLLLBBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOOOOLBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOOOOLBBBBBBBBBBBBBLOO
DATA OOOOOOOOOOOLLBBBBBBBBBBBBBBLOO
DATA OOOOOOOOLLLBBBBBBBBBBBBBBBBBLO
DATA OOOOOOLLBBBBBLBBBBBLLBBBBBBBLO
DATA OOOOOLLBBBBLLOLBBBLOOLBBBBBLOO
DATA OOOOOLBBBLLOOOOLBBLOOOLBBBBLOO
DATA OOOOOOLLLLOOOOOOLLOOOOOLLLLOOO
'--mon2RT
DATA OOOOOOOOOOOOOOOLLLLLLLOOOOOOOO
DATA OOOOOOOOOOOOOLLBEEEEEBLLLOOOOO
DATA OOOOOOOOOOOLLBBEBBBLBBBBBLOOOO
DATA OOOOOOOOOOLBBBEBBBLTLBBBBBLOOO
DATA OOOOOOOOOLBBBBBBBLRTTLBBBBBLOO
DATA OOOOOOOOLBBBBBBBLRRRTTLBBBBBLO
DATA OOOOOOLLBBBBBBBBLRRRTTLBBBBBLO
DATA OOOOOOLBBBBBBBBBLRRRRTLBBBBBBL
DATA OOOOOLBBBBBBBBBLRRRRRTTLBBBBBL
DATA OOOOLBBBBBBBBBBLRRRRRTTLBBBBBL
DATA OOOLOBBBBBBBBBBLRRRRRTTLBBBBBL
DATA OLLBBBBBBBBBBBBLRRRRRTTLBBBBBL
DATA LLLLLLLLLLLBBBBBLRRRTTLBBBBBBL
DATA LLLLLLLLLLLLOBBBLRRRTTLBBBBBLB
DATA LOOOOOOOOOOOOBBBLRRTTTLBBBBBLO
DATA OLOOOOOOOOOOBBBBBLTTTLBBBBBBLO
DATA OOLOOOOOOOOOBBBBBBLTLBBBBBBLOO
DATA OOOLLLBBBBBBBBBBBBBLBBBBBBBLOO
DATA OOOOOOLBBBBBBBBBBBBBBBBBBBBLOO
DATA OOOOOOOLLOBBBBBBBBBBBBBBBBLOOO
DATA OOOOOOOOOLBBBBBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOLLLBBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOOOOLBBBBBBBBBBBBLOOO
DATA OOOOOOOOOOOOOLBBBBBBBBBBBBBLOO
DATA OOOOOOOOOOLLLBBBBBBBBBBBBBBLOO
DATA OOOOOOLLLLBBBBBBBBBBBBBBBBBBLO
DATA OOOOOLLBBLBBBBBLLLBBBBBBBBLBBL
DATA OOOOLBBLOLBBBBLOOOLBBBBBBLOLLL
DATA OOOOOLLOOLBBBLOOOOOLBBBBLOOOOO
DATA OOOOOOOOOOLLLOOOOOOOLLLLOOOOOO

'---diam
DATA OOOOOOOODDDDDDDDDDDDDDOOOOOOOO
DATA OOOOOODDDDDDDDDDDDDDDDDDOOOOOO
DATA OOOOODDDDDDDDDDDDDDDDDDDDOOOOO
DATA OOOODDDDDDDDDDDDDDDDDDDDDDOOOO
DATA OOODDDDDDDDDDDDDDDDDDDDDDDDOOO
DATA OODDDDDDDDDDDDDDDDDDDDDDDDDDOO
DATA ODDDDDDDDDDDDDDDDDDDDDDDDDDDDO
DATA DDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DATA DDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DATA DDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DATA DDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DATA ODDDDDDDDDDDDDDDDDDDDDDDDDDDDO
DATA OODDDDDDDDDDDDDDDDDDDDDDDDDDOO
DATA OODDDDDDDDDDDDDDDDDDDDDDDDDDOO
DATA OOODDDDDDDDDDDDDDDDDDDDDDDDOOO
DATA OOOODDDDDDDDDDDDDDDDDDDDDDOOOO
DATA OOOOODDDDDDDDDDDDDDDDDDDDOOOOO
DATA OOOOODDDDDDDDDDDDDDDDDDDDOOOOO
DATA OOOOOODDDDDDDDDDDDDDDDDDOOOOOO
DATA OOOOOOODDDDDDDDDDDDDDDDOOOOOOO
DATA OOOOOOOODDDDDDDDDDDDDDOOOOOOOO
DATA OOOOOOOOODDDDDDDDDDDDOOOOOOOOO
DATA OOOOOOOOOODDDDDDDDDDOOOOOOOOOO
DATA OOOOOOOOOOODDDDDDDDOOOOOOOOOOO
DATA OOOOOOOOOOOODDDDDDOOOOOOOOOOOO
DATA OOOOOOOOOOOOODDDDOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOODDOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

'---EME
DATA OOOOOOOOEEEEEEEEEEEEEEOOOOOOOO
DATA OOOOOOEEEEEEEEEEEEEEEEEEOOOOOO
DATA OOOOOEEEEEEEEEEEEEEEEEEEEOOOOO
DATA OOOOEEEEEEEEEEEEEEEEEEEEEEOOOO
DATA OOOEEEEEEEEEEEEEEEEEEEEEEEEOOO
DATA OOEEEEEEEEEEEEEEEEEEEEEEEEEEOO
DATA OEEEEEEEEEGGGGGGGGGGEEEEEEEEEO
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA EEEEEEEEEGGGGGGGGGGGGEEEEEEEEE
DATA OEEEEEEEEEGGGGGGGGGGEEEEEEEEEO
DATA OOEEEEEEEEEEEEEEEEEEEEEEEEEEOO
DATA OOOEEEEEEEEEEEEEEEEEEEEEEEEOOO
DATA OOOOEEEEEEEEEEEEEEEEEEEEEEOOOO
DATA OOOOOEEEEEEEEEEEEEEEEEEEEOOOOO
DATA OOOOOOEEEEEEEEEEEEEEEEEEOOOOOO
DATA OOOOOOOOEEEEEEEEEEEEEEOOOOOOOO





'---MUD
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOWOOOOWOOOOWOOOO
DATA OOOWOOOOOOOOOOOWOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOWOO
DATA OOOOOWOOOOOOOOOOWOOWOOOOOOOWOO
DATA OOOOOOOOOOOOOOOWOOOOOOOOOOOOOO
DATA OOOOOWOOOOOOOOOOOOOOOWOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOWOOOOOOOOO
DATA OOOOWOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOWOOOOOWOOOOOOOOOO
DATA OOOOOOOOOOWOOOOOWOOOOOOOOOWOOO
DATA OOOWWOOOOOOOOOOOOOWOOOOOOOOOOO
DATA OOOOOOOOOWOOOOOOOOOOOOOOOOOOOO
DATA OOOOWWOWOOOOOOOOOOOOOOOOOWOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOWOOOOOOOOOOOWOOWOOO
DATA OOOOOOOOOOOOWOOOOOOOOOOWOOOOOO
DATA OOWOOOOOOOOOOOOOOOOOOOWOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOWOWOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOWOOOOOOOWOWOOOOOOOOO
DATA OOOOOOOOOOOOWOOOOOOOOWOOOOOOOO
DATA OOOOOOOOOOOOOOOWOOOOOOOWOOOOOO
DATA OOOOOOOOOOOOOOOOOWOOOOOOOOOOOO
DATA OOOOOOWOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOWOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOWOOOWOWOOOOOOOOOOOOOO
DATA OOOOOOOWOOOOOOOOOOOOOOOOOOOOOO
'---MUD2
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OYOOOOOOOOOOOOOWOOOOWOOOOWOOOO
DATA YOOWOOOOOYOOOOOWOOOOOOOOOOOOOO
DATA OOOOOOOOYOOOOOOOOOOOOOOOOOOWOO
DATA OOOYOWOOYOOOYOOOWOOWOOOYOOOWOO
DATA OOOOOYOOOOOOOYOWOOOOOOOOOYOOOO
DATA OOOOOWOOOOOOOYOOOOOOOWOOOOOOOO
DATA OOOOOOOOYOOOYOOOOOOOWOOOYOYOOO
DATA OOOOWOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOWOOOOOWOOOOOOOOOO
DATA OOOOOOOYOOWOOOOOWOOOOOOOOOWOOO
DATA OOOWWOOOOOOOOOOOOOWOOOOYOOOOOO
DATA OOOOOOOOOYOOOOOOOOOOOOOOOOOOOO
DATA OOOOWWOWOOOOYOOOOOOOOOOOOWOOOO
DATA OOOOOOOOOOOOOYOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOWOOOYOOOOOOOWOOWOOO
DATA OOOOOOOOOOOOWOOOOYOOOOOWOOOOYO
DATA OOWOOOYOOOOOOOOYOOYOOOWOOOOOOO
DATA OOOOOOOYOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOYOOOOYOOOOYOOOOYOOO
DATA OOYOWOWOOOOOOOOOOOOOOOOOOYOOOO
DATA OOOOYOOOOOWOOOOOOOWYWOOOOOOOOO
DATA OOOOOOOOOOOOWOOOOOOOOWYYOOYOOO
DATA OYOOOYOOOOOOOOOWOOOOOOOWOOOOOO
DATA OOOOOOOOOOOOOOOOOWOOOOOOOOOOOO
DATA OOOOOOWOOOOOOOOOOOOOOOYOOOOOOO
DATA OOOYOOYOOOOOOOOOOOYOOOOOOYOOOO
DATA OOYOOOOOOOOWOOOOOOOOOOOOYOOOOO
DATA OOOOOOOOOWOOOWOYOOOOOYYOYOOOOO
DATA OOOOOOYWOOOOOOOOOYOOOOOOOOOOOO
'---MUD3
DATA OOOOGGOOOOOOOOOOGGOOOOOOOOOOOO
DATA OOOOGGGOOOOOOOOOOOGGOOOOPOOOOO
DATA OPOOOGGGOGOOOOOOGGOOOOOOOOOOPO
DATA OOOOOGOGOOOOOOGGOOOOOOOOOOOOOO
DATA OPOOPOOGGOOOGGGOOOOOOPPOOOOOOO
DATA OOOOOOOGGOOGGOOOOPOOOOOOOOOOOO
DATA OOOOOOOOOGGOOPOOOOOPOOOOOOOOOO
DATA OOPOPOOOOOGGGOOOOOOOOOOOOOOOOO
DATA OOPOOOOPOOOGGGOGGGOOOOOPPOPOOO
DATA OOOOOPOOOOOOGGGGOOGGOOOOOOOOOO
DATA OPOPOOOOGGGGOGOOOOGGOOOOPOOOOO
DATA OOOOOOGOGOOOOOOOOPOOGGOOOOOOOO
DATA OOOGGGGGOOOOOPOOOOOOOGOOOOPOOO
DATA GGGGGOOOOOOOPOOOPOOOOGOGGOOOOO
DATA OGOOOOPOOOOOOOOOOOOOOOGGGGOOGG
DATA GGOOOOOOOOOOOOOOOPOOOOOOOOGGGO
DATA OOGOOOOPOOPOOOOOOOOOOOOOOOOOOO
DATA OOOGGOOOOOOOOOOOOOOOOOOPPOOOOO
DATA OOOGGGOOOOOOPOOOOOPOOOOOOOOGOO
DATA OOOOGGOGOPOOOOOOPOOOOOPOOOGGOO
DATA OPOOOGGGGOOPOOOOOOOOOPOOOGGOGG
DATA OOOOOOPGOOOPOOOPOOGGOOGOGGOOOO
DATA OOOPOOGGGOOOOOOOGGGOGGGGOOOOOO
DATA OPOOPOOGGGOOPOOGGOOOOOPOOOPOOO
DATA OOOOOOOOOGGOOOGGGOOOOOOOOOOOOO
DATA OOPOOOPOOGOOGGGOOOOOOOOOOPOOOO
DATA OOOOOOGGGGGGGOOOOOOPOPOOOOOOOO
DATA OPOOPOGGOOOOOOOOOOOOOOOOOOPOOO
DATA OOOOGGGOOOOOOPOOOPOOOOOOOOOOOO
DATA OOOOGGOOOOOOOOOOOOOOOOOOOOOOOO
'---MUD4
DATA OOOOOOOOOOOWOOOOOROOOOOOOOOOOO
DATA OOROWOOROOWOOOOOROWOOOOOOOOOOO
DATA OOOOOWOOOOOOOOOOOWOOOOWWOOOOOO
DATA OOOWOOOOOOOOOOOOOOOOROROOOOOOO
DATA OOOROORWOOOOOOOOOOOOOOWOOOOOOO
DATA OOWOOROOOOOOOOROOOOOOOWOOOOOOO
DATA OWOOOOOOOOOOOOOROOOOOOOWOOOOOO
DATA OOOROOOOOOOOOOOOOOOOOOOOOWOOOO
DATA OOOOOOOOOWWOOOOOOOOOROOOOWOOOO
DATA OOOROOOOOOOWOOOOOOOOOOOOOOOOOO
DATA OOOOROOOOOOOWOOOROOOOROOOOOOOO
DATA OOOOOOOOOOOOOOOOOROOOROOOOOOOO
DATA OOOWOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOWOOOOOOOOOOOROOOOOROOOOWOOOO
DATA OWOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOWWOOOOOOOOOOOOROOOOOWOOO
DATA OOROOOOOOOOOOOWOOOOOOOOOOOOWOO
DATA OOOOROOOOOOOOWOOOOOOROOOOOOOOO
DATA OOOOOOROOOOOOOOOOOOOOOOOORROOO
DATA OOROOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OWOOOOOOOOOROOOOOOORROOOOOOORO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOWOWOOOOOOOOOOOOOWOOOOOROOROO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOWOOOOOOOOOOOOOOROOOOO
DATA OOWOOOOOOOOOOOOOOOWOOOOOROOOOO
DATA OOOOOOOOOOOOROROOWROOOOOOOOOOO
DATA OOROOOOOOOOOOOOOOOOOOOOOROOOOO
DATA OOOOOOOOROOOOOOOOOOOOOOROOOOOO
DATA OROOOOOOOOOOOOOOOROOOOOOOOOOOO
'---MUD5
DATA ZZZZZZZZZZZZZZZZZZAAAAZZZZAAZZ
DATA ZZZZZAAAAAAZZZZZZAAAAAAZZZAAAZ
DATA ZZZZAAAAAAAAZZZZAAAAAAAAAZZAAZ
DATA ZZZAAAAAAAAAAZZAAAAZZAAAAZZZZZ
DATA ZZAAAAAAAAAAZZZAAAZZAAAAAAZZZZ
DATA ZZAAAAAAAAAAAAAZZZZAAAAAAAAZZZ
DATA ZAAAAAAAAAAAAAAZZZAAAAAAAAAAZZ
DATA ZZAAAAAAAAAAAAZZZAAAAAAAAAAAAZ
DATA ZZAAAAAAAAAAAZZZAAAAAAAAAAAAAZ
DATA ZZZAAAAAAAAAZZZZZAAAAAAAAAAZZZ
DATA ZZZZAAAAAAAAAAAAAAAAAZAAAAAAZZ
DATA ZZAAZZAAAAAAAAAAAAAAZAAAAAAAAZ
DATA ZAAAZZZAAAAAAAAAAAAZAAAAAAAAAA
DATA ZAAAAAZZAAAAAAAAAAZZAAAAAAAAAZ
DATA ZZZZZZZZZAAAAAAAAZZZZZZZZAAZZZ
DATA ZZZZZAAAAAAAAAAAAAAZZZZZAAAAZZ
DATA ZZZZAAAAAAAAAAAAAAAAZZZAAAAAAZ
DATA ZZZZZAAAAAAAAAAAAAAZZZZZAAAAZZ
DATA ZZZZZZAAAAAAAAAAAAZZZZZZZAAZZZ
DATA ZZZZZZZAAAAAAAAAAZZZZAAAAZZZZZ
DATA ZZZZZZZZAAAAAAAAZZZAAAAAAAAZZZ
DATA ZZAAAAAAAAAZZZZZZZZZAAAAAAZZZZ
DATA ZZZAAAAAAZZZAAAAAZZZZZZAAAAAZZ
DATA ZZZZAAAAZZZAAAAAAAZZZZZZAAAZZZ
DATA ZAAAAAAAAZAAAAAAAAAZZAAAAAAAZZ
DATA ZZAAAAAAZAAAAAAAAAAAZZAAAAAZZZ
DATA ZZAAAAAAAAAAAAAAAAAAAZZAAAAAZZ
DATA ZZZAAAZZAAAAAAAAAAAAZZZZZAAAAZ
DATA ZZZZZZZZZAAAAAAAAAAZZZZZAAAAAZ
DATA ZZZZZZZZZZAAAAAAAAZZZZZZZZZZZZ

'---sac
DATA OOOOOOOWWWWOOWWWOOOOOOOOOOOOOO
DATA OOOOOOWYWWYWWYYWOWWWWOOOOOOOOO
DATA OOOOOOOWYYYWWYYYYWWYYWOOOOOOOO
DATA OOOOOOOOWYYYWYYYYWYYWWOOOOOOOO
DATA OOOOOOOOOWYYYWYYWYYWOOOOOOOOOO
DATA OOOOOOOOOOWYWYYYWYYWOOOOOOOOOO
DATA OOOOOOOOOOOWYYYWYYWOOOOOOOOOOO
DATA OOOOOOOOOOOWYYYYYYWOOOOOOOOOOO
DATA OOOOOOOOOOOWWWWWWWWOOOOOOOOOOO
DATA OOOOOOOOOOOWWWWWWWWOOOOOOOOOOO
DATA OOOOOOOOOWWYYYYYYYYWWOOOOOOOOO
DATA OOOOOOWWWYYYYYYYYYYYYWWWOOOOOO
DATA OOOOOWYYYYYYYWYYWYYYYYYYWOOOOO
DATA OOOWWYYYYYYYWWWWWWYYYYYYYWWOOO
DATA OOWYYYYYYYYWYWYYWYWYYYYYYYYWOO
DATA OWYYYYYYYYWYYWYYWYYWYYYYYYYYWO
DATA WYYYYYYYYYWYYWYYWYYYYYYYYYYYYW
DATA WYYYYYYYYYWYYWYYWYYYYYYYYYYYYW
DATA WYYYYYYYYYWYYWYWWWWYYYYYYYYYYW
DATA WYYYYYYYYYYWWWWYWYYWYYYYYYYYYW
DATA WYYYYYYYYYYYYWYYWYYYWYYYYYYYYW
DATA WYYYYYYYYYYYYWYYWYYYWYYYYYYYYW
DATA WYYYYYYYYYYYYWYYWYYWYYYYYYYYYW
DATA WYYYYYYYYYWYYWYYWYYWYYYYYYYYYW
DATA OWYYYYYYYYYWYWYYWYWYYYYYYYYYWO
DATA OWYYYYYYYYYYWWWWWWYYYYYYYYYYWO
DATA OOWYYYYYYYYYYWYYWYYYYYYYYYYWOO
DATA OOOWWYYYYYYYYYYYYYYYYYYYYWWOOO
DATA OOOOOWWWWYYYYYYYYYYYYWWWWOOOOO
DATA OOOOOOOOOWWWWWWWWWWWWOOOOOOOOO
'---cHARGE
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
DATA OOOOOYYYYOOOOOOOOOOOOYYYYYYOOO
DATA OOYYYYYYYYYOOOOOOOOYYYYYYYYYYO
DATA OYYYYYYYYYYYYYYYYYYYYOOOOOOOOO
DATA OYYYYYOYYYYYYYYYYYYYYYYYOOOOOO
DATA OYYYYYYYYYYYYYYYYYYYYYYYYYYOOO
DATA OOYYYYYYYYYYYYYYYYYYYYYYYOOOOO
DATA YYYYYYYYYYYYYYYYYYYYYYYYOOOOOO
DATA OYYYYYYYYYYYYYYYYYYYYYYYYYYYYO
DATA OYYYYYYYYYYYYYYYYYYYYYYYYYYOOO
DATA YYYYYYYYYYYYYYYYYYYYYYYYYYYYYY

'---BARRICADE
DATA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
DATA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
DATA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
DATA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
DATA BBBLLLBBBLLLBBBLLLBBBLLLBBBLLL
DATA LLLBBBLLLBBBLLLBBBLLLBBBLLLBBB
DATA BBLLBBLLBBLLBBLLBBLLBBLLBBLBBL
DATA LLBBLLBBLLBBLLBBLLBBLLBBLLBBLL
DATA BLBLBLBLBLBLBLBLBLBLBLBLBLBLBL
DATA LBLBLBLBLBLBLBLBLBLBLBLBLBLBLB
DATA LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
DATA LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
DATA LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
DATA LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
DATA LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
DATA LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
DATA LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
DATA LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
DATA LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
DATA LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
DATA LBLBLBLBLBLBLBLBLBLBLBLBLBLBLB
DATA BLBLBLBLBLBLBLBLBLBLBLBLBLBLBL
DATA BBLLBBLLBBLLBBLLBBLLBBLLBBLBBL
DATA BBLLBBLLBBLLBBLLBBLLBBLLBBLBBL
DATA LLLBBBLLLBBBLLLBBBLLLBBBLLLBBB
DATA BBBLLLBBBLLLBBBLLLBBBLLLBBBLLL
DATA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
DATA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
DATA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
DATA BBBBBBBBBBBBBBBBBBBBBBBBBBBBBB


'------font
DATA 0111011110011101110011111111110111110001111110011110001100001000110001011101111001110111100111111111100011000110001100011000111111000000110011111111110001011111111111111111111111110000000000000001111100100011100000000000
DATA 1000110001100011001010000100001000010001001000001010010100001101110001100011000110001100011000000100100011000110001100011000100001000001110010001000010011010000100000000110001100010000000000000001000101110011100111001110
DATA 1000110001100001000110000100001000010001001000001010100100001010111001100011000110001100011000000100100011000110101010101000100010000001010000001000010101010000100000001010001100010000000000000000000101110010000111001110
DATA 1000111110100001000111100111001011111111001000001011000100001010110101100011111010001111100111000100100011000110101001000101000100000000010001111011111001011110111110010011111111110000001110111110111100100001000000000000
DATA 1111110001100001000110000100001000110001001000001010100100001000110011100011000010101101000000100100100011000110101010100010001000000000010010000000011111100010100010010010001000010000001110000000110000100000000111001110
DATA 1000110001100011001010000100001000110001001001001010010100001000110001100011000010010100100000100100100010101010101100010010010000000000010010000000010001000010100010010010001000010111000110000000000000000000000111001110
DATA 1000111110011101110011111100000111110001111110110110001111111000110001011101000001101100011111000100011100010001010100010010011111000001111111111111110001011110111110010011111000010111000100000000110000100000000000000010


'---level data of array a
DATA 1,6,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1
DATA 1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,6,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1
DATA 1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,0,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,0,1,1
DATA 1,1,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1
DATA 1,1,1,4,1,1,1,1,1,4,1,1,1,1,1,1,1,1,0,1,1
DATA 1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,0,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2
'-------------level data of array b
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
'face start pos
DATA 3,18
'no of faces in this level
DATA 2
'digger start pos
DATA 11,18
'---level data of array a2
DATA 1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,4,1,1,1
DATA 1,1,4,4,4,4,4,4,4,4,4,1,1,1,1,1,4,5,4,1,1
DATA 1,1,1,1,1,4,1,6,1,1,1,6,1,1,4,1,1,4,1,1,1
DATA 1,5,1,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,5,1,5,1,5,1,5,1,1,1,1,1,1,1,1,1,1,4,1
DATA 1,4,1,5,1,5,1,5,1,1,1,1,1,1,4,1,1,1,1,1,1
DATA 1,1,0,1,5,1,5,1,1,1,1,1,1,4,1,1,1,1,0,1,1
DATA 1,1,0,1,1,5,1,1,1,1,1,4,1,1,1,1,1,1,0,1,1
DATA 1,1,0,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,0,1,1
DATA 1,1,0,1,1,1,1,1,5,1,0,1,6,1,1,4,1,1,0,4,1
DATA 1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1
DATA 1,1,0,1,1,1,1,1,1,4,0,1,1,1,1,1,1,1,0,1,1
DATA 1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1
DATA 1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2
'-------------level data of array b2
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 6,2
DATA 4
DATA 12,2
'---level data of array a3
DATA 1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1
DATA 1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,4,1,1,1,1,1,4,4,4,4,1,1,1,1,1,1
DATA 1,1,1,5,5,1,1,1,5,5,5,1,1,4,4,1,5,1,1,1,1
DATA 1,1,4,4,4,4,1,1,5,0,5,1,1,4,4,1,1,1,1,4,1
DATA 1,5,5,5,5,5,5,1,4,0,4,1,1,4,4,1,1,1,1,1,1
DATA 4,4,4,4,4,4,4,4,5,0,5,1,1,4,4,4,4,4,1,1,1
DATA 1,5,5,5,5,5,5,1,5,0,5,1,1,1,1,1,1,1,1,1,1
DATA 1,6,4,4,4,4,1,1,4,0,4,1,1,1,1,1,1,1,1,6,1
DATA 1,1,1,5,5,1,1,1,4,0,0,0,0,0,1,1,1,1,1,4,1
DATA 1,1,1,1,1,1,1,1,4,0,4,1,1,1,1,1,1,1,1,1,1
DATA 1,4,1,1,4,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,5,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1
DATA 5,1,5,1,6,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1
DATA 1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2
'-------------level data of array b3
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 4,9
DATA 4
DATA 9,9
'---level data of array a4
DATA 5,1,1,1,1,1,6,1,1,1,4,1,1,1,1,1,1,1,1,1,6
DATA 1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,4,1
DATA 1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,5,1,1,1,1
DATA 1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,4,1,5,1,4,1
DATA 1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,5,1,1
DATA 1,0,1,5,5,1,0,1,1,1,1,1,1,1,0,4,1,1,1,5,1
DATA 1,0,1,4,4,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1
DATA 1,0,1,5,5,1,0,1,1,5,5,5,1,1,0,5,1,1,1,4,1
DATA 1,0,1,1,1,1,0,1,1,5,6,5,1,1,0,1,1,1,4,1,1
DATA 1,0,1,1,1,1,0,1,1,5,5,5,1,1,0,1,1,4,1,1,1
DATA 1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,4,1,1,1,1
DATA 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,1,5,1
DATA 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
DATA 4,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2
'-------------level data of array b4
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 2,1
DATA 5
DATA 2,1
'---level data of array a5
DATA 5,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,1,1,1,1,5
DATA 5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5
DATA 5,0,1,1,1,1,1,1,1,1,0,1,4,1,4,0,1,1,1,0,5
DATA 5,0,1,5,6,1,1,4,1,1,0,1,1,5,1,0,1,5,1,0,5
DATA 5,0,5,5,5,1,4,4,4,1,0,0,0,0,0,0,1,5,1,0,5
DATA 5,0,1,5,1,1,1,4,1,1,0,1,6,1,1,0,1,1,1,0,5
DATA 1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,5
DATA 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5
DATA 1,0,1,1,1,1,1,1,1,1,0,4,4,4,4,0,1,5,1,0,4
DATA 4,0,1,1,1,1,5,1,1,1,0,1,5,5,5,0,1,6,1,0,4
DATA 4,0,5,1,1,5,1,1,1,1,0,1,1,4,1,0,1,5,1,0,4
DATA 4,0,1,5,5,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,4
DATA 4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4
DATA 4,1,1,1,1,1,1,1,1,1,4,5,4,5,4,5,4,5,1,1,4
DATA 4,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2
'-------------level data of array b5
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
DATA 7,10
DATA 6
DATA 12,10


ileft:
FOR i% = 0 TO 29
READ A$
FOR j% = 1 TO 30
B$ = MID$(A$, j%, 1)
IF B$ = "T" THEN PSET (j% - 1, i%), 3
IF B$ = "B" THEN PSET (j% - 1, i%), 1
IF B$ = "L" THEN PSET (j% - 1, i%), 9
IF B$ = "U" THEN PSET (j% - 1, i%), 11
IF B$ = "E" THEN PSET (j% - 1, i%), 2
IF B$ = "G" THEN PSET (j% - 1, i%), 10
IF B$ = "D" THEN PSET (j% - 1, i%), 4
IF B$ = "R" THEN PSET (j% - 1, i%), 12
IF B$ = "P" THEN PSET (j% - 1, i%), 5
IF B$ = "I" THEN PSET (j% - 1, i%), 13
IF B$ = "W" THEN PSET (j% - 1, i%), 6
IF B$ = "A" THEN PSET (j% - 1, i%), 7
IF B$ = "Z" THEN PSET (j% - 1, i%), 8
IF B$ = "Y" THEN PSET (j% - 1, i%), 14
IF B$ = "H" THEN PSET (j% - 1, i%), 15
IF B$ = "O" THEN PSET (j% - 1, i%), 0
NEXT: NEXT
RETURN

iright:
nobody% = 0
FOR i% = 0 TO 29
READ A$
FOR j% = 30 TO 1 STEP -1
nobody% = nobody% + 1
B$ = MID$(A$, j%, 1)
IF B$ = "T" THEN PSET (nobody%, i%), 3
IF B$ = "B" THEN PSET (nobody%, i%), 1
IF B$ = "L" THEN PSET (nobody%, i%), 9
IF B$ = "U" THEN PSET (nobody%, i%), 11
IF B$ = "E" THEN PSET (nobody%, i%), 2
IF B$ = "G" THEN PSET (nobody%, i%), 10
IF B$ = "D" THEN PSET (nobody%, i%), 4
IF B$ = "R" THEN PSET (nobody%, i%), 12
IF B$ = "P" THEN PSET (nobody%, i%), 5
IF B$ = "I" THEN PSET (nobody%, i%), 13
IF B$ = "W" THEN PSET (nobody%, i%), 6
IF B$ = "A" THEN PSET (nobody%, i%), 7
IF B$ = "Z" THEN PSET (nobody%, i%), 8
IF B$ = "Y" THEN PSET (nobody%, i%), 14
IF B$ = "H" THEN PSET (nobody%, i%), 15
IF B$ = "O" THEN PSET (nobody%, i%), 0

NEXT
nobody% = 0
NEXT
RETURN

iup:
FOR i% = 29 TO 0 STEP -1
READ A$
FOR j% = 1 TO 30
B$ = MID$(A$, j%, 1)
IF B$ = "T" THEN PSET (i%, j% - 1), 3
IF B$ = "B" THEN PSET (i%, j% - 1), 1
IF B$ = "L" THEN PSET (i%, j% - 1), 9
IF B$ = "U" THEN PSET (i%, j% - 1), 11
IF B$ = "E" THEN PSET (i%, j% - 1), 2
IF B$ = "G" THEN PSET (i%, j% - 1), 10
IF B$ = "D" THEN PSET (i%, j% - 1), 4
IF B$ = "R" THEN PSET (i%, j% - 1), 12
IF B$ = "P" THEN PSET (i%, j% - 1), 5
IF B$ = "I" THEN PSET (i%, j% - 1), 13
IF B$ = "W" THEN PSET (i%, j% - 1), 6
IF B$ = "A" THEN PSET (i%, j% - 1), 7
IF B$ = "Z" THEN PSET (i%, j% - 1), 8
IF B$ = "Y" THEN PSET (i%, j% - 1), 14
IF B$ = "H" THEN PSET (i%, j% - 1), 15
IF B$ = "O" THEN PSET (i%, j% - 1), 0

NEXT: NEXT
RETURN

idown:
nobody% = 29
FOR i% = 0 TO 29
READ A$
FOR j% = 1 TO 30
B$ = MID$(A$, j%, 1)
nobody% = nobody% - 1
IF B$ = "T" THEN PSET (i%, nobody%), 3
IF B$ = "B" THEN PSET (i%, nobody%), 1
IF B$ = "L" THEN PSET (i%, nobody%), 9
IF B$ = "U" THEN PSET (i%, nobody%), 11
IF B$ = "E" THEN PSET (i%, nobody%), 2
IF B$ = "G" THEN PSET (i%, nobody%), 10
IF B$ = "D" THEN PSET (i%, nobody%), 4
IF B$ = "R" THEN PSET (i%, nobody%), 12
IF B$ = "P" THEN PSET (i%, nobody%), 5
IF B$ = "I" THEN PSET (i%, nobody%), 13
IF B$ = "W" THEN PSET (i%, nobody%), 6
IF B$ = "A" THEN PSET (i%, nobody%), 7
IF B$ = "Z" THEN PSET (i%, nobody%), 8
IF B$ = "Y" THEN PSET (i%, nobody%), 14
IF B$ = "H" THEN PSET (i%, nobody%), 15
IF B$ = "O" THEN PSET (i%, nobody%), 0

NEXT
nobody% = 29
NEXT
RETURN
'--------------------------------------------------------------------
assignvaluestoface:
i% = 10
IF noofface% > 0 THEN CALL facearrayassign(f1(), i%, fsr%, fsc%)
IF noofface% > 1 THEN CALL facearrayassign(f2(), i%, fsr%, fsc%)
IF noofface% > 2 THEN CALL facearrayassign(f3(), i%, fsr%, fsc%)
IF noofface% > 3 THEN CALL facearrayassign(f4(), i%, fsr%, fsc%)
IF noofface% > 4 THEN CALL facearrayassign(f5(), i%, fsr%, fsc%)
IF noofface% > 5 THEN CALL facearrayassign(f6(), i%, fsr%, fsc%)
RETURN
assignvaluestodigger:
gameover% = 0: sackpush% = 0: facedeath% = 0: sackid% = 0
d(6) = fdr%: d(7) = fdc%
d(0) = 30 * d(6) + 5: d(1) = 30 * d(7) + 5: d(2) = d(0): d(3) = d(1): d(4) = -1: d(5) = 0
d(8) = -1: count% = fdr%
RETURN
'---------------------------------------------------------------------

gamestart:
'--------------------------------------------array A
PAINT (1, 1), 14: LINE (5, 5)-(635, 455), 0, BF
count% = 0: diamond% = 0
FOR i% = 0 TO 14
FOR j% = 0 TO 20
READ nobody%
A(i%, j%) = nobody%
SELECT CASE nobody%
       CASE 1:
            IF level% = 1 THEN PUT (j% * 30 + 5, i% * 30 + 5), mud
            IF level% = 2 THEN PUT (j% * 30 + 5, i% * 30 + 5), mud2
            IF level% = 3 THEN PUT (j% * 30 + 5, i% * 30 + 5), mud3
            IF level% = 4 THEN PUT (j% * 30 + 5, i% * 30 + 5), mud4
            IF level% = 5 THEN PUT (j% * 30 + 5, i% * 30 + 5), mud5
       CASE 2:
            PUT (j% * 30 + 5, i% * 30 + 5), barricade
       CASE 4:
            PUT (j% * 30 + 5, i% * 30 + 5), diam: diamond% = diamond% + 1
       CASE 5:
            PUT (j% * 30 + 5, i% * 30 + 5), eme: diamond% = diamond% + 1
       CASE 6:
            count% = count% + 1
            PUT (j% * 30 + 5, i% * 30 + 5), sack
            SELECT CASE count%
                   CASE 1:
                        CALL sackassign(i%, j%, s1(), count%)
                   CASE 2:
                        CALL sackassign(i%, j%, s2(), count%)
                   CASE 3:
                        CALL sackassign(i%, j%, s3(), count%)
         
            END SELECT
END SELECT
NEXT: NEXT
'--------------------------------------------array B
FOR i% = 0 TO 14
FOR j% = 0 TO 20
READ nobody%
B(i%, j%) = nobody%
NEXT: NEXT
'--------------------------------------------bullet
steplimit% = 3
stepjump% = 30 / steplimit%
                                              '---------------------------grid'FOR i% = 5 TO 635 STEP 30'FOR j% = 5 TO 455'PSET (i%, j%), 10'NEXT'NEXT'FOR i% = 5 TO 455 STEP 30'FOR j% = 5 TO 635'PSET (j%, i%), 10'NEXT'NEXT
'----assigining values to the FACE & digger array
f1(9) = 0: f2(9) = 0: f3(9) = 0: f4(9) = 0: f5(9) = 0: f6(9) = 0

READ fsr%, fsc%
READ noofface%
GOSUB assignvaluestoface
nobody% = 0
bullets% = 2
READ fdr%, fdc%
GOSUB assignvaluestodigger
RETURN


'-------------------------------------------------------------------------
gameover:
SELECT CASE gameover%
       CASE 1:
            points = points + 1000
            FOR i% = 1000 TO 5000 STEP 50: SOUND i%, .2: NEXT
            IF level% = 5 THEN
            GOSUB hiscore
            CLS : LINE (200, 180)-(450, 285), level% + 1, BF: LINE (220, 210)-(430, 250), 0, BF
            COLOR level%: LOCATE 15, 29: PRINT " Congratulations! You won": SLEEP
            SYSTEM
            ELSE
            level% = level% + 1
            CLS : LINE (200, 180)-(450, 285), level% + 1, BF: LINE (220, 210)-(430, 250), 0, BF
            COLOR level%: LOCATE 15, 30: PRINT "Great !! Enter level "; level%: SLEEP
            GOSUB gamestarts
            END IF
       CASE 3:
             CLS
             LOCATE 12, 32: PRINT "<<<<  GAMEOVER  >>>>"
             SLEEP: SYSTEM
             
       CASE 2:
             
                life% = life% - 1
                IF life% = 0 THEN
                   LINE (d(3), d(2))-(d(3) + 30, d(2) + 30), 0, BF
                   PAINT (d(3) + 1, d(2) + 1), 0
                   LINE (d(3), d(2) + 15)-(d(3) + 30, d(2) + 30), 15, BF
                   PAINT (d(3) + 1, d(2) + 16), 15
                   CIRCLE (d(3) + 15, d(2) + 15), 15, 15
                   PAINT (d(3) + 14, d(2) + 14), 15
                   n$ = "R": j = d(2) + 2: i = d(3) + 13: CALL font(fonts$(), n$, i, j, 0, 15)
                   n$ = "I": j = d(2) + 11: i = d(3) + 13: CALL font(fonts$(), n$, i, j, 0, 15)
                   n$ = "P": j = d(2) + 20: i = d(3) + 13: CALL font(fonts$(), n$, i, j, 0, 15)
                   t = TIMER + 3: WHILE t > TIMER: WEND
                   GOSUB hiscore: CLS : LOCATE 12, 32: PRINT "<<<<  GAMEOVER  >>>>": SLEEP: SYSTEM
                END IF
               
                A(d(6), d(7)) = 0
                LINE (d(3), d(2))-(d(3) + 29, d(2) + 29), 0, BF
                IF f1(9) > 0 THEN A(f1(6), f1(7)) = 0: A(f1(10), f1(11)) = 0: LINE (f1(3), f1(2))-(f1(3) + 29, f1(2) + 29), 0, BF
                IF f2(9) > 0 THEN A(f2(6), f2(7)) = 0: A(f2(10), f2(11)) = 0: LINE (f2(3), f2(2))-(f2(3) + 29, f2(2) + 29), 0, BF
                IF f3(9) > 0 THEN A(f3(6), f3(7)) = 0: A(f3(10), f3(11)) = 0: LINE (f3(3), f3(2))-(f3(3) + 29, f3(2) + 29), 0, BF
                IF f4(9) > 0 THEN A(f4(6), f4(7)) = 0: A(f4(10), f4(11)) = 0: LINE (f4(3), f4(2))-(f4(3) + 29, f4(2) + 29), 0, BF
                IF f5(9) > 0 THEN A(f5(6), f5(7)) = 0: A(f5(10), f5(11)) = 0: LINE (f5(3), f5(2))-(f5(3) + 29, f5(2) + 29), 0, BF
                IF f6(9) > 0 THEN A(f6(6), f6(7)) = 0: A(f6(10), f6(11)) = 0: LINE (f6(3), f6(2))-(f6(3) + 29, f6(2) + 29), 0, BF
                FOR i% = 0 TO 14: FOR j% = 0 TO 20
                IF i% >= fsr% AND j% = fsc% AND i% <= fdr% THEN B(i%, j%) = i% ELSE B(i%, j%) = 0
                NEXT: NEXT
                GOSUB assignvaluestoface
                GOSUB assignvaluestodigger
                GOSUB game
END SELECT
'-------------------------------------------------------------------------

introscreen:
CLS : COLOR 4: LOCATE 2, 35: PRINT "D I G G E R"
COLOR 10: LOCATE 3, 25: PRINT STRING$(31, CHR$(196))
COLOR 2: LOCATE 4, 30: PRINT "A Game by Navin K Ipe"
LINE (50, 150)-(200, 350), 14, B
LOCATE 11, 13: PRINT "M E N U"
LOCATE 12, 10: COLOR 9: PRINT STRING$(13, CHR$(196))
LOCATE 14, 10: COLOR 10: PRINT "P L A Y"
LOCATE 16, 10: COLOR 12: PRINT "H E L P"
LOCATE 18, 10: COLOR 12: PRINT "H I S C O R E"
LOCATE 20, 10: COLOR 12: PRINT "E X I T"
COLOR 5: LOCATE 24, 2: PRINT "Use arrow keys to use the menu"
LINE (250, 100)-(600, 400), 5, B
COLOR 4: LOCATE 8, 35: PRINT "Digger"
COLOR 5: LOCATE 12, 35: PRINT "Cool Monster"
COLOR 9: LOCATE 16, 35: PRINT "Mad Monster"
COLOR 6: LOCATE 20, 37: PRINT "Sack"; : COLOR 10: PRINT "        Emerald"; : COLOR 12: PRINT "        Diamond"
nobody% = 140: count% = 550: steplimit% = 3
i% = 1: j% = 1
DO WHILE x$ <> CHR$(27)
K$ = INKEY$
IF K$ = CHR$(0) + CHR$(72) THEN i% = i% - 1
IF K$ = CHR$(0) + CHR$(80) THEN i% = i% + 1
IF K$ = CHR$(13) THEN
                 IF i% = 4 THEN SYSTEM
                 IF i% = 3 THEN GOSUB HISC:  GOSUB introscreen: i% = 1
                 IF i% = 2 THEN GOSUB help:  GOSUB introscreen: i% = 1
                 IF i% = 1 THEN EXIT DO
END IF
IF K$ = CHR$(27) THEN SYSTEM
IF i% = 0 THEN i% = 4
IF i% = 5 THEN i% = 1
IF i% = 1 THEN LOCATE 14, 10: COLOR 10: PRINT "P L A Y": LOCATE 16, 10: COLOR 12: PRINT "H E L P": LOCATE 20, 10: COLOR 12: PRINT "E X I T": COLOR 12: LOCATE 18, 10: PRINT "H I S C O R E"
IF i% = 2 THEN LOCATE 16, 10: COLOR 10: PRINT "H E L P": LOCATE 14, 10: COLOR 12: PRINT "P L A Y": LOCATE 20, 10: COLOR 12: PRINT "E X I T": COLOR 12: LOCATE 18, 10: PRINT "H I S C O R E"
IF i% = 3 THEN LOCATE 18, 10: COLOR 10: PRINT "H I S C O R E": LOCATE 14, 10: COLOR 12: PRINT "P L A Y": LOCATE 16, 10: COLOR 12: PRINT "H E L P"
IF i% = 4 THEN LOCATE 20, 10: COLOR 10: PRINT "E X I T": LOCATE 14, 10: COLOR 12: PRINT "P L A Y": LOCATE 16, 10: COLOR 12: PRINT "H E L P": COLOR 12: LOCATE 18, 10: PRINT "H I S C O R E"
t = TIMER + .01: WHILE t > TIMER: WEND
SELECT CASE j%
       CASE 1:
                SELECT CASE steplimit%
                CASE 1:
                LINE (count%, nobody%)-(count% + 29, nobody% + 29), 0, BF: count% = count% - 5: PUT (count%, nobody%), dlt: steplimit% = steplimit% + 1
                CASE 2:
                LINE (count%, nobody%)-(count% + 29, nobody% + 29), 0, BF: count% = count% - 5: PUT (count%, nobody%), dlt2: steplimit% = steplimit% + 1
                CASE 3:
                LINE (count%, nobody%)-(count% + 29, nobody% + 29), 0, BF: count% = count% - 5: PUT (count%, nobody%), dlt3
                END SELECT
                IF steplimit% = 3 THEN steplimit% = 1
                IF count% <= 280 THEN j% = j% + 1: nobody% = 200: count% = 550: steplimit% = 2
     
      CASE 2:
                SELECT CASE steplimit%
                CASE 1:
                LINE (count%, nobody%)-(count% + 29, nobody% + 29), 0, BF: count% = count% - 5: PUT (count%, nobody%), fm1
                CASE 2:
                LINE (count%, nobody%)-(count% + 29, nobody% + 29), 0, BF: count% = count% - 5: PUT (count%, nobody%), fm2
                END SELECT
                IF steplimit% = 2 THEN steplimit% = 1 ELSE steplimit% = 2
                IF count% <= 280 THEN j% = j% + 1: nobody% = 260: count% = 550: steplimit% = 2

      CASE 3:
                SELECT CASE steplimit%
                CASE 1:
                LINE (count%, nobody%)-(count% + 29, nobody% + 29), 0, BF: count% = count% - 5: PUT (count%, nobody%), ml1
                CASE 2:
                LINE (count%, nobody%)-(count% + 29, nobody% + 29), 0, BF: count% = count% - 5: PUT (count%, nobody%), ml2
                END SELECT
                IF steplimit% = 2 THEN steplimit% = 1 ELSE steplimit% = 2
                IF count% <= 280 THEN j% = j% + 1: nobody% = 380: count% = 550: steplimit% = 2

     CASE 4:
                PUT (290, 340), sack: j% = j% + 1
                t = TIMER + .1: WHILE t > TIMER: WEND
     CASE 5:
                PUT (395, 340), eme: j% = j% + 1
                t = TIMER + .1: WHILE t > TIMER: WEND
     CASE 6:
                PUT (520, 340), diam: j% = j% + 1
                t = TIMER + 1: WHILE t > TIMER: WEND
     CASE 7:
          LINE (280, 140)-(280 + 29, 140 + 29), 0, BF
          LINE (280, 200)-(280 + 29, 200 + 29), 0, BF
          LINE (280, 260)-(280 + 29, 260 + 29), 0, BF
          LINE (290, 340)-(290 + 29, 340 + 29), 0, BF
          LINE (395, 340)-(395 + 29, 340 + 29), 0, BF
          LINE (520, 340)-(520 + 29, 340 + 29), 0, BF
          nobody% = 140: count% = 550: steplimit% = 3: j% = 1
END SELECT
   

LOOP
RETURN

help:
CLS : COLOR 12: LOCATE 2, 35: PRINT "  H E L P  "
COLOR 10: LOCATE 3, 25: PRINT STRING$(31, CHR$(196))
COLOR 9: LOCATE 5, 10: PRINT "The basic objective of digger is to dig through mud in"
PRINT "    various levels and collect all the diamonds and emeralds there."
COLOR 14: LOCATE 8, 10: PRINT "  You will find sacks of money on the way. Drop them by"
PRINT "  making a hole below them and collect the remains of the sack to get"
PRINT "  more bullet charge.You can push a sack around in the mud.Try making"
PRINT "  the sack fall on a monster. You get points for killing a monster that way"
COLOR 5: LOCATE 13, 10: PRINT "The purple monster wont trouble you much. But be very careful"
PRINT "                  of the blue monster. It moves very fast."
COLOR 1: LOCATE 16, 10: PRINT "Killing a monster gives you more points.Use the spacebar to shoot"
PRINT "                         the monsters and kill them"
COLOR 13: LOCATE 19, 10: PRINT "Press + or - to change the game speed"
COLOR 12: LOCATE 21, 10: PRINT "REMEMBER : USE THE ARROW KEYS ONLY FOR CHANGING THE DIRECTION OF THE DIGGER"
COLOR 10: LOCATE 24, 1: PRINT "Best of Luck then ! Press a enter to Play the game or spacebar to go to the menu"
SLEEP
RETURN

HISC:
CLS : COLOR 12
300 LOCATE 12, 20: OPEN "I", #1, "DIGSCORE.DIG"
INPUT #1, K$, t
400 PRINT K$; " HAS THE HIGHEST SCORE WITH "; t; " POINTS"
COLOR 10: LOCATE 14, 10: PRINT "<< Press enter to start the game or spacebar to go to the menu >>"
SLEEP
CLOSE #1: RETURN



hiscore:
100 OPEN "I", #1, "digscore.dig"
    t = 0
    INPUT #1, K$, t
    IF points > t THEN
    CLS : COLOR 10: LOCATE 10, 25: PRINT "You beat the highscore !!"
    COLOR 12: LOCATE 12, 5: PRINT "Your score is "; points; " the previous score was "; t; " scored by "; K$
    COLOR 14: LOCATE 14, 25: INPUT "Enter your name please "; K$
    CLOSE #1: OPEN "O", #1, "digscore.dig": WRITE #1, K$, points: CLOSE #1: RETURN
    ELSE RETURN
    END IF
    
200
    t = 0: CLS : COLOR 10: LOCATE 10, 25: PRINT "You beat the highscore !!"
    COLOR 12: LOCATE 12, 10: PRINT "Your score is "; points; " while the previous score was "; t
    COLOR 14: LOCATE 14, 25: INPUT "Enter your name please "; K$
    WRITE #1, K$, points: CLOSE #1
    RETURN
    
'game data
'---------------------------------------------
'd( 0, 1, 2 , 3 ,  4 ,    5    , 6, 7,      8)
'd(dr,dc,ndr,ndc,movt,blockmovt,ar,ac,extmovt)
'
'f( 0, 1, 2 , 3 ,  4 ,    5    , 6, 7,      8,       9,     10,    11,    12)
'f(fr,fc,nfr,nfc,movt,blockmovt,ar,ac,extmovt, face ID, old ar,old rc,revive)

's( 0, 1, 2 , 3 ,  4 ,    5    , 6, 7,      8,       9)
's(sr,sc,nsr,nsc,movt,blockmovt,ar,ac,iterations, sack ID)

'Array a contains
'0  -  nothing
'1  -  mud
'2  -  barricade
'4  -  diamond
'5  -  emerald
'6  -  sack
'7  -  bullet charge   'let the logic of getting bullets be a little more complex

'Array b contains values of the digger which the face follows
'for i=0 to 14:for j=0 to 20:?a(i,j);:next:?:next
'FOR i = 0 TO 2: FOR j = 0 TO 2: PRINT m1(i, j); : NEXT: PRINT : NEXT
'FOR i = 0 TO 2: FOR j = 0 TO 2: PRINT m2(i, j); : NEXT: PRINT : NEXT

SUB backblock (d())
SELECT CASE d(8)
       CASE 1:
            d(3) = d(3) - 30
       CASE 2:
            d(2) = d(2) + 30
       CASE -1:
            d(3) = d(3) + 30
       CASE -2:
            d(2) = d(2) - 30
END SELECT
END SUB

SUB bestdirection (f(), B())
g% = B((f(2) - 5) / 30, (f(3) - 35) / 30)'rt
h% = B((f(2) - 5) / 30, (f(3) + 25) / 30)'lt
i% = B((f(2) - 35) / 30, (f(3) - 5) / 30)'up
j% = B((f(2) + 25) / 30, (f(3) - 5) / 30)'dn
IF g% > h% AND g% > i% AND g% > j% THEN f(6) = (f(2) - 5) / 30: f(7) = (f(3) - 35) / 30: f(4) = -1
IF h% > g% AND h% > i% AND h% > j% THEN f(6) = (f(2) - 5) / 30: f(7) = (f(3) + 25) / 30: f(4) = 1
IF i% > g% AND i% > h% AND i% > j% THEN f(6) = (f(2) - 35) / 30: f(7) = (f(3) - 5) / 30: f(4) = 2
IF j% > g% AND j% > h% AND j% > i% THEN f(6) = (f(2) + 25) / 30: f(7) = (f(3) - 5) / 30: f(4) = -2
END SUB

FUNCTION blockahead (A(), d())
SELECT CASE d(8)
       CASE 1:
            IF d(7) + 1 = 21 THEN blockahead = 1: EXIT FUNCTION
            IF A(d(6), d(7) + 1) = 0 OR A(d(6), d(7) + 1) = 1 THEN blockahead = 0 ELSE blockahead = 1
       CASE -1:
            IF d(7) - 1 = -1 THEN blockahead = 1: EXIT FUNCTION
            IF A(d(6), d(7) - 1) = 0 OR A(d(6), d(7) - 1) = 1 THEN blockahead = 0 ELSE blockahead = 1
       CASE 2:
            IF d(6) - 1 = -1 THEN blockahead = 1: EXIT FUNCTION
            IF A(d(6) - 1, d(7)) = 0 OR A(d(6) - 1, d(7)) = 1 THEN blockahead = 0 ELSE blockahead = 1
       CASE -2:
            IF d(6) + 1 = 15 THEN blockahead = 1: EXIT FUNCTION
            IF A(d(6) + 1, d(7)) = 0 OR A(d(6) + 1, d(7)) = 1 THEN blockahead = 0 ELSE blockahead = 1
END SELECT
END FUNCTION

SUB face (fm1(), fm2(), f(), A(), B(), gameover%)
IF f(9) = 99 THEN f(9) = -1: facedeath% = 0: A(f(6), f(7)) = 0: A(f(10), f(11)) = 0: LINE (f(1), f(0))-(f(1) + 29, f(0) + 29), 0, BF: EXIT SUB
IF f(5) = 0 THEN
 
   IF A(f(6), f(7)) = 9 THEN FOR i% = 100 TO 2500 STEP 100: SOUND i%, .1: NEXT: FOR i% = 2500 TO 100 STEP -100: SOUND i%, .1: NEXT: gameover% = 2
   CALL bestdirection(f(), B())
   SELECT CASE A(f(6), f(7))

          CASE 9:
               FOR i% = 100 TO 2500 STEP 100: SOUND i%, .1: NEXT: FOR i% = 2500 TO 100 STEP -100: SOUND i%, .1: NEXT: gameover% = 2
          CASE 6:
               f(2) = f(0): f(3) = f(1): EXIT SUB
   END SELECT

 
   f(5) = 1

ELSE
   SELECT CASE f(4)
          CASE 1:
               LINE (f(3), f(2))-(f(3) + 34, f(2) + 29), 0, BF
               f(3) = f(3) + 5
          CASE -1:
               LINE (f(3) - 5, f(2))-(f(3) + 29, f(2) + 29), 0, BF
               f(3) = f(3) - 5
          CASE 2:
               LINE (f(3), f(2) - 5)-(f(3) + 29, f(2) + 29), 0, BF
               f(2) = f(2) - 5
          CASE -2:
               LINE (f(3), f(2))-(f(3) + 29, f(2) + 34), 0, BF
               f(2) = f(2) + 5
   END SELECT
   IF f(5) = 2 THEN A(f(6), f(7)) = f(9): A(f(10), f(11)) = 0: f(10) = f(6): f(11) = f(7)
   CALL facemoveinblok(fm1(), fm2(), f())
 
  
END IF

END SUB

SUB facearrayassign (f(), count%, i%, j%)
f(6) = i%: f(7) = j%
f(0) = 30 * f(6) + 5
f(1) = 30 * f(7) + 5
f(2) = f(0): f(3) = f(1)
f(4) = -2
f(5) = 0
f(8) = 1
f(9) = count%
f(10) = f(6)
f(11) = f(7)
count% = count% + 1
END SUB

SUB facemoveinblok (f1(), f2(), f())
SELECT CASE f(5)
       CASE 1:
            PUT (f(3), f(2)), f1
       CASE 4:
            PUT (f(3), f(2)), f2
       CASE 2:
            PUT (f(3), f(2)), f1
       CASE 5:
            PUT (f(3), f(2)), f2
       CASE 3:
            PUT (f(3), f(2)), f1
       CASE 6:
            PUT (f(3), f(2)), f2
END SELECT
f(0) = f(2): f(1) = f(3)
IF f(5) <> 6 THEN f(5) = f(5) + 1 ELSE f(5) = 0
END SUB

SUB font (fonts$(), n$, pc, pr, fg, bg)
FOR i = 1 TO LEN(n$)
m$ = MID$(n$, i, 1)
SELECT CASE m$
CASE "A":
        AC = 1
CASE "B":
        AC = 6
CASE "C":
        AC = 11
CASE "D":
        AC = 16
CASE "E":
        AC = 21
CASE "F":
        AC = 26
CASE "G":
        AC = 31
CASE "H":
        AC = 36
CASE "I":
        AC = 41
CASE "J":
        AC = 46
CASE "K":
        AC = 51
CASE "L":
        AC = 56
CASE "M":
        AC = 61
CASE "N":
        AC = 66
CASE "O":
        AC = 71
CASE "0":
        AC = 71
CASE "P":
        AC = 76
CASE "Q":
        AC = 81
CASE "R":
        AC = 86
CASE "S":
        AC = 91
CASE "T":
        AC = 96
CASE "U":
        AC = 101
CASE "V":
        AC = 106
CASE "W":
        AC = 111
CASE "X":
        AC = 116
CASE "Y":
        AC = 121
CASE "Z":
        AC = 126
CASE " ":
        AC = 131
CASE "1":
        AC = 136
CASE "2":
        AC = 141
CASE "3":
        AC = 146
CASE "4":
        AC = 151
CASE "5":
        AC = 156
CASE "6":
        AC = 161
CASE "7":
        AC = 166
CASE "8":
        AC = 171
CASE "9":
        AC = 176
CASE ".":
        AC = 181
CASE ",":
        AC = 186
CASE "-":
        AC = 191
CASE "?":
        AC = 196
CASE "!":
        AC = 201
CASE CHR$(39):
        AC = 206
CASE ":":
        AC = 211
CASE ";":
        AC = 216
CASE ELSE:
        AC = 131
END SELECT

ACPE = AC + 4
FOR K = 1 TO 7
O$ = fonts$(K, 1)
FOR L = AC TO ACPE
IF MID$(O$, L, 1) = "1" THEN PSET (pc, pr), fg ELSE PSET (pc, pr), bg
pc = pc + 1
NEXT L
pr = pr + 1: pc = pc - 5: NEXT K
pr = pr - 7: pc = pc + 8: NEXT i
END SUB

SUB monster (ml1(), ml2(), mr1(), mr2(), m1(), m2(), m(), A(), d(), gameover%, s(), shoot%)
IF ((s(6) = m(6) AND s(7) = m(7)) OR (s(6) = m(10) AND s(7) = m(11))) AND shoot% = 1 THEN m(9) = 99
IF m(9) = 99 THEN facedeath% = 0: m(9) = -1: A(m(6), m(7)) = 0: A(m(10), m(11)) = 0: LINE (m(1), m(0))-(m(1) + 29, m(0) + 29), 0, BF: EXIT SUB
IF m(5) = 5 THEN
                m(5) = 1
                SELECT CASE m(4)
                               CASE 1:
                                    m(7) = m(7) + 1
                               CASE 2:
                                    m(6) = m(6) - 1
                               CASE -1:
                                    m(7) = m(7) - 1
                               CASE -2:
                                    m(6) = m(6) + 1
                        END SELECT
            IF ((s(6) = m(6) AND s(7) = m(7)) OR (s(6) = m(10) AND s(7) = m(11))) AND shoot% = 1 THEN m(9) = 99
            m2(0, 1) = m(6) - 1: m2(1, 0) = m(7) - 1: m2(1, 2) = m(7) + 1: m2(2, 1) = m(6) + 1
            IF m(6) - 1 <> -1 THEN
            IF A(m(6) - 1, m(7)) = 9 THEN gameover% = 2: LINE (m(3), m(2))-(m(3) + 29, m(2) + 29), 0, BF: LINE (m(1), m(0))-(m(1) + 29, m(0) + 29), 0, BF: FOR i% = 100 TO 2500 STEP 100: SOUND i%, .1: NEXT: FOR i% = 2500 TO 100 STEP -100: SOUND i%, .1: NEXT: EXIT SUB
            END IF
            IF m(7) - 1 <> -1 THEN
            IF A(m(6), m(7) - 1) = 9 THEN gameover% = 2: LINE (m(3), m(2))-(m(3) + 29, m(2) + 29), 0, BF: LINE (m(1), m(0))-(m(1) + 29, m(0) + 29), 0, BF: FOR i% = 100 TO 2500 STEP 100: SOUND i%, .1: NEXT: FOR i% = 2500 TO 100 STEP -100: SOUND i%, .1: NEXT: EXIT SUB
            END IF
            IF m(7) + 1 <> 21 THEN
            IF A(m(6), m(7) + 1) = 9 THEN gameover% = 2: LINE (m(3), m(2))-(m(3) + 29, m(2) + 29), 0, BF: LINE (m(1), m(0))-(m(1) + 29, m(0) + 29), 0, BF: FOR i% = 100 TO 2500 STEP 100: SOUND i%, .1: NEXT: FOR i% = 2500 TO 100 STEP -100: SOUND i%, .1: NEXT: EXIT SUB
            END IF
            IF m(6) + 1 <> 15 THEN
            IF A(m(6) + 1, m(7)) = 9 THEN gameover% = 2: LINE (m(3), m(2))-(m(3) + 29, m(2) + 29), 0, BF: LINE (m(1), m(0))-(m(1) + 29, m(0) + 29), 0, BF: FOR i% = 100 TO 2500 STEP 100: SOUND i%, .1: NEXT: FOR i% = 2500 TO 100 STEP -100: SOUND i%, .1: NEXT: EXIT SUB
            END IF
            IF m(6) - 1 = -1 THEN m2(0, 1) = 1 ELSE IF (A(m(6) - 1, m(7)) >= 10 AND A(m(6) - 1, m(7)) <= 17) OR A(m(6) - 1, m(7)) = 0 THEN m2(0, 1) = 0 ELSE m2(0, 1) = 1
            IF m(7) - 1 = -1 THEN m2(1, 0) = 1 ELSE IF (A(m(6), m(7) - 1) >= 10 AND A(m(6), m(7) - 1) <= 17) OR A(m(6), m(7) - 1) = 0 THEN m2(1, 0) = 0 ELSE m2(1, 0) = 1
            IF m(7) + 1 = 21 THEN m2(1, 2) = 1 ELSE IF (A(m(6), m(7) + 1) >= 10 AND A(m(6), m(7) + 1) <= 17) OR A(m(6), m(7) + 1) = 0 THEN m2(1, 2) = 0 ELSE m2(1, 2) = 1
            IF m(6) + 1 = 15 THEN m2(2, 1) = 1 ELSE IF (A(m(6) + 1, m(7)) >= 10 AND A(m(6) + 1, m(7)) <= 17) OR A(m(6) + 1, m(7)) = 0 THEN m2(2, 1) = 0 ELSE m2(2, 1) = 1
           
           
            IF m1(0, 1) <> m2(0, 1) OR m1(1, 0) <> m2(1, 0) OR m1(2, 1) <> m2(2, 1) OR m1(1, 2) <> m2(1, 2) THEN
               '--bestdirn
               IF SGN(m(6) - d(6)) = 1 AND SGN(m(7) - d(7)) = 1 THEN nobody% = 1
               IF SGN(m(6) - d(6)) = 1 AND SGN(m(7) - d(7)) = 0 THEN nobody% = 2
               IF SGN(m(6) - d(6)) = 1 AND SGN(m(7) - d(7)) = -1 THEN nobody% = 3
               IF SGN(m(6) - d(6)) = 0 AND SGN(m(7) - d(7)) = 1 THEN nobody% = 4
               IF SGN(m(6) - d(6)) = 0 AND SGN(m(7) - d(7)) = -1 THEN nobody% = 5
               IF SGN(m(6) - d(6)) = -1 AND SGN(m(7) - d(7)) = 1 THEN nobody% = 6
               IF SGN(m(6) - d(6)) = -1 AND SGN(m(7) - d(7)) = 0 THEN nobody% = 7
               IF SGN(m(6) - d(6)) = -1 AND SGN(m(7) - d(7)) = -1 THEN nobody% = 8
               DO WHILE x$ <> CHR$(27)
               SELECT CASE nobody%
                      CASE 0:
                           EXIT DO
                      CASE 1:
                           IF m2(0, 1) <> 1 THEN m(4) = 2: EXIT DO
                           IF m2(1, 0) <> 1 THEN m(4) = -1: EXIT DO
                           IF m2(1, 2) <> 1 THEN m(4) = 1: EXIT DO ELSE m(4) = -2: EXIT DO
                      CASE 2:
                           IF m2(0, 1) <> 1 THEN m(4) = 2: EXIT DO
                           IF m2(1, 0) <> 1 THEN m(4) = -1: EXIT DO
                           IF m2(1, 2) <> 1 THEN m(4) = 1: EXIT DO ELSE m(4) = -2: EXIT DO
                      CASE 3:
                           IF m2(0, 1) <> 1 THEN m(4) = 2: EXIT DO
                           IF m2(1, 2) <> 1 THEN m(4) = 1: EXIT DO
                           IF m2(1, 0) <> 1 THEN m(4) = -1: EXIT DO ELSE m(4) = -2: EXIT DO
                      CASE 4:
                           IF m2(1, 0) <> 1 THEN m(4) = -1: EXIT DO
                           IF m2(0, 1) <> 1 THEN m(4) = 2: EXIT DO
                           IF m2(1, 2) <> 1 THEN m(4) = 1: EXIT DO ELSE m(4) = -2: EXIT DO
                      CASE 5:
                           IF m2(1, 2) <> 1 THEN m(4) = 1: EXIT DO
                           IF m2(0, 1) <> 1 THEN m(4) = 2: EXIT DO
                           IF m2(1, 0) <> 1 THEN m(4) = -1: EXIT DO ELSE m(4) = -2: EXIT DO
                      CASE 6:
                           IF m2(1, 0) <> 1 THEN m(4) = -1: EXIT DO
                           IF m2(2, 1) <> 1 THEN m(4) = -2: EXIT DO
                           IF m2(1, 2) <> 1 THEN m(4) = 1: EXIT DO ELSE m(4) = 2: EXIT DO
                      CASE 7:
                           IF m2(2, 1) <> 1 THEN m(4) = -2: EXIT DO
                           IF m2(0, 1) <> 1 THEN m(4) = 2: EXIT DO
                           IF m2(1, 0) <> 1 THEN m(4) = -1: EXIT DO ELSE m(4) = 1: EXIT DO
                      CASE 8:
                           IF m2(2, 1) <> 1 THEN m(4) = -2: EXIT DO
                           IF m2(1, 2) <> 1 THEN m(4) = 1: EXIT DO
                           IF m2(0, 1) <> 1 THEN m(4) = 2: EXIT DO ELSE m(4) = -1: EXIT DO
                          
              
               END SELECT
               LOOP
                m1(0, 1) = m2(0, 1): m1(1, 0) = m2(1, 0): m1(1, 2) = m2(1, 2): m1(2, 1) = m2(2, 1)
               ELSE
                A(m(6), m(7)) = m(9)
                A(m(10), m(11)) = 0: m(10) = m(6): m(11) = m(7)
                m(0) = m(6) * 30 + 5
                m(1) = m(7) * 30 + 5
               IF ((s(6) = m(6) AND s(7) = m(7)) OR (s(6) = m(10) AND s(7) = m(11))) AND shoot% = 1 THEN m(9) = 99
               END IF
ELSE m(5) = m(5) + 1
END IF
SELECT CASE m(4)
       CASE 1:
            m(1) = m(1) + 6
       CASE -1:
            m(1) = m(1) - 6
       CASE -2:
            m(0) = m(0) + 6
       CASE 2:
            m(0) = m(0) - 6
           
END SELECT
LINE (m(3), m(2))-(m(3) + 29, m(2) + 29), 0, BF

SELECT CASE m(5)
       CASE 1:
            IF nobody% = 3 OR nobody% = 2 OR nobody% = 5 OR nobody% = 8 THEN PUT (m(1), m(0)), mr1 ELSE PUT (m(1), m(0)), ml1
       CASE 2:
            IF nobody% = 3 OR nobody% = 2 OR nobody% = 5 OR nobody% = 8 THEN PUT (m(1), m(0)), mr1 ELSE PUT (m(1), m(0)), ml1
       CASE 3:
            IF nobody% = 3 OR nobody% = 2 OR nobody% = 5 OR nobody% = 8 THEN PUT (m(1), m(0)), mr1 ELSE PUT (m(1), m(0)), ml1
       CASE 4:
            IF nobody% = 3 OR nobody% = 2 OR nobody% = 5 OR nobody% = 8 THEN PUT (m(1), m(0)), mr2 ELSE PUT (m(1), m(0)), ml2
       CASE 5:
            IF nobody% = 3 OR nobody% = 2 OR nobody% = 5 OR nobody% = 8 THEN PUT (m(1), m(0)), mr2 ELSE PUT (m(1), m(0)), ml2
END SELECT
IF ((s(6) = m(6) AND s(7) = m(7)) OR (s(6) = m(10) AND s(7) = m(11))) AND shoot% = 1 THEN m(9) = 99
m(2) = m(0): m(3) = m(1)

END SUB

SUB movinginblock (d1(), d2(), d3(), d())

SELECT CASE d(5)
       CASE 1:
            PUT (d(3), d(2)), d1
       CASE 4:
            PUT (d(3), d(2)), d1
       CASE 2:
            PUT (d(3), d(2)), d2
       CASE 5:
            PUT (d(3), d(2)), d2
       CASE 3:
            PUT (d(3), d(2)), d3
       CASE 6:
            PUT (d(3), d(2)), d3
END SELECT
d(0) = d(2): d(1) = d(3)
IF d(5) <> 6 THEN d(5) = d(5) + 1 ELSE d(5) = 0
END SUB

SUB nextblock (d())
SELECT CASE d(8)
       CASE 1:
            d(3) = d(3) + 30
       CASE 2:
            d(2) = d(2) - 30
       CASE -1:
            d(3) = d(3) - 30
       CASE -2:
            d(2) = d(2) + 30
END SELECT
END SUB

SUB sackassign (i%, j%, s(), count%)
s(0) = i% * 30 + 5
s(1) = j% * 30 + 5
s(2) = s(0): s(3) = s(1)
s(4) = 0
s(5) = 0
s(6) = i%
s(7) = j%
s(8) = 0
s(9) = count%
END SUB

SUB sackcheck (A(), s(), sack(), charge(), facedeath%, sackpush%, gameover%)
IF s(4) >= 12 AND sackpush% <> 1 AND (A(s(6) + 1, s(7)) = 1 OR A(s(6) + 1, s(7)) = 0) THEN s(4) = 1
IF s(6) + 1 = 15 THEN s(4) = 0
IF s(4) = 1 THEN
                     IF s(5) = 5 THEN
                        A(s(6), s(7)) = 0: s(6) = s(6) + 1: A(s(6), s(7)) = 6
                        s(5) = 0: s(4) = 0
                        IF A(s(6) + 1, s(7)) = 9 THEN gameover% = 2: FOR i% = 100 TO 2500 STEP 100: SOUND i%, .1: NEXT: FOR i% = 2500 TO 100 STEP -100: SOUND i%, .1: NEXT: s(4) = 0: A(s(6), s(7)) = 7: s(9) = 0: s(2) = s(2) + 5: LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF: PUT (s(3), s(2)), charge: EXIT SUB
                        IF (A(s(6) + 1, s(7)) = 0 OR (A(s(6) + 1, s(7)) > 9 AND A(s(6) + 1, s(7)) < 17)) AND s(6) + 1 <> 15 THEN s(4) = 1 ELSE s(4) = 0: A(s(6), s(7)) = 7: s(9) = 0: s(2) = s(2) + 5: LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF: PUT (s(3), s(2)), charge: EXIT SUB
                        ELSE s(5) = s(5) + 1
                     END IF
            ELSE
                IF A(s(6) + 1, s(7)) = 0 THEN s(4) = s(4) + 2: EXIT SUB ELSE EXIT SUB
END IF

s(2) = s(2) + 5
IF A(s(6) + 1, s(7)) > 9 OR A(s(6) + 1, s(7)) < 17 THEN facedeath% = A(s(6) + 1, s(7))
LINE (s(1), s(0))-(s(1) + 29, s(0) + 29), 0, BF
PUT (s(3), s(2)), sack
s(0) = s(2)
END SUB

SUB sackpushing (sack(), s(), d(), A())
SELECT CASE d(4)
          CASE 1:
               s(3) = s(3) + 5
               PUT (s(3), s(2)), sack
               s(1) = s(3)
               IF d(5) = 0 THEN
               s(7) = s(7) + 1
               A(s(6), s(7)) = 6
               LINE (s(3), s(2))-(s(3) + 29, s(2) + 29), 0, BF: PUT (s(3), s(2)), sack: sackpush% = 0
               END IF
          CASE -1:
               s(3) = s(3) - 5
               PUT (s(3), s(2)), sack
                s(1) = s(3)
               IF d(5) = 0 THEN
               s(7) = s(7) - 1: A(s(6), s(7)) = 6: LINE (s(3), s(2))-(s(3) + 29, s(2) + 29), 0, BF: PUT (s(3), s(2)), sack: sackpush% = 0
               END IF
          CASE 2:
               s(2) = s(2) - 5
               PUT (s(3), s(2)), sack
               s(0) = s(2)
               IF d(5) = 0 THEN
               s(6) = s(6) - 1: A(s(6), s(7)) = 6: LINE (s(3), s(2))-(s(3) + 29, s(2) + 29), 0, BF: PUT (s(3), s(2)), sack: sackpush% = 0
               END IF
          CASE -2:
               s(2) = s(2) + 5
               PUT (s(3), s(2)), sack
               s(0) = s(2)
               IF d(5) = 0 THEN
               s(6) = s(6) + 1: A(s(6), s(7)) = 6: LINE (s(3), s(2))-(s(3) + 29, s(2) + 29), 0, BF: PUT (s(3), s(2)), sack: sackpush% = 0
               END IF
END SELECT
END SUB

